"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: miiverse/smm_request_post_id_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.SMMRequestPostIDResponse = exports.SMMRequestPostIDRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "miiverse";
function createBaseSMMRequestPostIDRequest() {
    return { courseId: 0n };
}
exports.SMMRequestPostIDRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.courseId !== 0n) {
            if (BigInt.asUintN(64, message.courseId) !== message.courseId) {
                throw new globalThis.Error("value provided for field message.courseId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.courseId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSMMRequestPostIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.courseId = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { courseId: isSet(object.courseId) ? BigInt(object.courseId) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.courseId !== 0n) {
            obj.courseId = message.courseId.toString();
        }
        return obj;
    },
    create(base) {
        return exports.SMMRequestPostIDRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSMMRequestPostIDRequest();
        message.courseId = object.courseId ?? 0n;
        return message;
    },
};
function createBaseSMMRequestPostIDResponse() {
    return { postId: 0n };
}
exports.SMMRequestPostIDResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.postId !== 0n) {
            if (BigInt.asUintN(64, message.postId) !== message.postId) {
                throw new globalThis.Error("value provided for field message.postId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.postId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSMMRequestPostIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.postId = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { postId: isSet(object.postId) ? BigInt(object.postId) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.postId !== 0n) {
            obj.postId = message.postId.toString();
        }
        return obj;
    },
    create(base) {
        return exports.SMMRequestPostIDResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSMMRequestPostIDResponse();
        message.postId = object.postId ?? 0n;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
