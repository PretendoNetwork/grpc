// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/upload_file_ctr.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileAttributes } from "./file_attributes";
import { FileCTR } from "./file_ctr";
import { PayloadContentCTR } from "./payload_content_ctr";

export const protobufPackage = "boss.v2";

export interface UploadFileCTRRequest {
  taskId: string;
  bossAppId: string;
  supportedCountries: string[];
  supportedLanguages: string[];
  attributes: FileAttributes | undefined;
  name: string;
  serialNumber: number;
  payloadContents: PayloadContentCTR[];
}

export interface UploadFileCTRResponse {
  file: FileCTR | undefined;
}

function createBaseUploadFileCTRRequest(): UploadFileCTRRequest {
  return {
    taskId: "",
    bossAppId: "",
    supportedCountries: [],
    supportedLanguages: [],
    attributes: undefined,
    name: "",
    serialNumber: 0,
    payloadContents: [],
  };
}

export const UploadFileCTRRequest: MessageFns<UploadFileCTRRequest> = {
  encode(message: UploadFileCTRRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.bossAppId !== "") {
      writer.uint32(18).string(message.bossAppId);
    }
    for (const v of message.supportedCountries) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.supportedLanguages) {
      writer.uint32(34).string(v!);
    }
    if (message.attributes !== undefined) {
      FileAttributes.encode(message.attributes, writer.uint32(42).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.serialNumber !== 0) {
      writer.uint32(56).uint32(message.serialNumber);
    }
    for (const v of message.payloadContents) {
      PayloadContentCTR.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFileCTRRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFileCTRRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bossAppId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.supportedCountries.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.supportedLanguages.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.attributes = FileAttributes.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.serialNumber = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.payloadContents.push(PayloadContentCTR.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFileCTRRequest {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
      supportedCountries: globalThis.Array.isArray(object?.supportedCountries)
        ? object.supportedCountries.map((e: any) => globalThis.String(e))
        : [],
      supportedLanguages: globalThis.Array.isArray(object?.supportedLanguages)
        ? object.supportedLanguages.map((e: any) => globalThis.String(e))
        : [],
      attributes: isSet(object.attributes) ? FileAttributes.fromJSON(object.attributes) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serialNumber: isSet(object.serialNumber) ? globalThis.Number(object.serialNumber) : 0,
      payloadContents: globalThis.Array.isArray(object?.payloadContents)
        ? object.payloadContents.map((e: any) => PayloadContentCTR.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UploadFileCTRRequest): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.bossAppId !== "") {
      obj.bossAppId = message.bossAppId;
    }
    if (message.supportedCountries?.length) {
      obj.supportedCountries = message.supportedCountries;
    }
    if (message.supportedLanguages?.length) {
      obj.supportedLanguages = message.supportedLanguages;
    }
    if (message.attributes !== undefined) {
      obj.attributes = FileAttributes.toJSON(message.attributes);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serialNumber !== 0) {
      obj.serialNumber = Math.round(message.serialNumber);
    }
    if (message.payloadContents?.length) {
      obj.payloadContents = message.payloadContents.map((e) => PayloadContentCTR.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UploadFileCTRRequest>): UploadFileCTRRequest {
    return UploadFileCTRRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadFileCTRRequest>): UploadFileCTRRequest {
    const message = createBaseUploadFileCTRRequest();
    message.taskId = object.taskId ?? "";
    message.bossAppId = object.bossAppId ?? "";
    message.supportedCountries = object.supportedCountries?.map((e) => e) || [];
    message.supportedLanguages = object.supportedLanguages?.map((e) => e) || [];
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? FileAttributes.fromPartial(object.attributes)
      : undefined;
    message.name = object.name ?? "";
    message.serialNumber = object.serialNumber ?? 0;
    message.payloadContents = object.payloadContents?.map((e) => PayloadContentCTR.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUploadFileCTRResponse(): UploadFileCTRResponse {
  return { file: undefined };
}

export const UploadFileCTRResponse: MessageFns<UploadFileCTRResponse> = {
  encode(message: UploadFileCTRResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.file !== undefined) {
      FileCTR.encode(message.file, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFileCTRResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFileCTRResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.file = FileCTR.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFileCTRResponse {
    return { file: isSet(object.file) ? FileCTR.fromJSON(object.file) : undefined };
  },

  toJSON(message: UploadFileCTRResponse): unknown {
    const obj: any = {};
    if (message.file !== undefined) {
      obj.file = FileCTR.toJSON(message.file);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadFileCTRResponse>): UploadFileCTRResponse {
    return UploadFileCTRResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadFileCTRResponse>): UploadFileCTRResponse {
    const message = createBaseUploadFileCTRResponse();
    message.file = (object.file !== undefined && object.file !== null) ? FileCTR.fromPartial(object.file) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
