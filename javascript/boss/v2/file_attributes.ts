// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/file_attributes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "boss.v2";

export interface FileAttributes {
  attribute1: string;
  attribute2: string;
  attribute3: string;
  description: string;
}

function createBaseFileAttributes(): FileAttributes {
  return { attribute1: "", attribute2: "", attribute3: "", description: "" };
}

export const FileAttributes: MessageFns<FileAttributes> = {
  encode(message: FileAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attribute1 !== "") {
      writer.uint32(10).string(message.attribute1);
    }
    if (message.attribute2 !== "") {
      writer.uint32(18).string(message.attribute2);
    }
    if (message.attribute3 !== "") {
      writer.uint32(26).string(message.attribute3);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attribute1 = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attribute2 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attribute3 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileAttributes {
    return {
      attribute1: isSet(object.attribute1) ? globalThis.String(object.attribute1) : "",
      attribute2: isSet(object.attribute2) ? globalThis.String(object.attribute2) : "",
      attribute3: isSet(object.attribute3) ? globalThis.String(object.attribute3) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: FileAttributes): unknown {
    const obj: any = {};
    if (message.attribute1 !== "") {
      obj.attribute1 = message.attribute1;
    }
    if (message.attribute2 !== "") {
      obj.attribute2 = message.attribute2;
    }
    if (message.attribute3 !== "") {
      obj.attribute3 = message.attribute3;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<FileAttributes>): FileAttributes {
    return FileAttributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileAttributes>): FileAttributes {
    const message = createBaseFileAttributes();
    message.attribute1 = object.attribute1 ?? "";
    message.attribute2 = object.attribute2 ?? "";
    message.attribute3 = object.attribute3 ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
