// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/delete_file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PlatformType, platformTypeFromJSON, platformTypeToJSON } from "./platform_type";

export const protobufPackage = "boss.v2";

export interface DeleteFileRequest {
  dataId: bigint;
  bossAppId: string;
  platformType: PlatformType;
}

export interface DeleteFileResponse {
}

function createBaseDeleteFileRequest(): DeleteFileRequest {
  return { dataId: 0n, bossAppId: "", platformType: 0 };
}

export const DeleteFileRequest: MessageFns<DeleteFileRequest> = {
  encode(message: DeleteFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataId !== 0n) {
      if (BigInt.asUintN(64, message.dataId) !== message.dataId) {
        throw new globalThis.Error("value provided for field message.dataId of type uint64 too large");
      }
      writer.uint32(8).uint64(message.dataId);
    }
    if (message.bossAppId !== "") {
      writer.uint32(18).string(message.bossAppId);
    }
    if (message.platformType !== 0) {
      writer.uint32(24).int32(message.platformType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.dataId = reader.uint64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bossAppId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.platformType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFileRequest {
    return {
      dataId: isSet(object.dataId) ? BigInt(object.dataId) : 0n,
      bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
      platformType: isSet(object.platformType) ? platformTypeFromJSON(object.platformType) : 0,
    };
  },

  toJSON(message: DeleteFileRequest): unknown {
    const obj: any = {};
    if (message.dataId !== 0n) {
      obj.dataId = message.dataId.toString();
    }
    if (message.bossAppId !== "") {
      obj.bossAppId = message.bossAppId;
    }
    if (message.platformType !== 0) {
      obj.platformType = platformTypeToJSON(message.platformType);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFileRequest>): DeleteFileRequest {
    return DeleteFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFileRequest>): DeleteFileRequest {
    const message = createBaseDeleteFileRequest();
    message.dataId = object.dataId ?? 0n;
    message.bossAppId = object.bossAppId ?? "";
    message.platformType = object.platformType ?? 0;
    return message;
  },
};

function createBaseDeleteFileResponse(): DeleteFileResponse {
  return {};
}

export const DeleteFileResponse: MessageFns<DeleteFileResponse> = {
  encode(_: DeleteFileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteFileResponse {
    return {};
  },

  toJSON(_: DeleteFileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteFileResponse>): DeleteFileResponse {
    return DeleteFileResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteFileResponse>): DeleteFileResponse {
    const message = createBaseDeleteFileResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
