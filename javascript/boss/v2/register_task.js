"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/register_task.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterTaskResponse = exports.RegisterTaskRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const task_1 = require("./task");
exports.protobufPackage = "boss.v2";
function createBaseRegisterTaskRequest() {
    return { id: "", bossAppId: "", titleId: 0n, country: "", description: "" };
}
exports.RegisterTaskRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.bossAppId !== "") {
            writer.uint32(18).string(message.bossAppId);
        }
        if (message.titleId !== 0n) {
            if (BigInt.asUintN(64, message.titleId) !== message.titleId) {
                throw new globalThis.Error("value provided for field message.titleId of type uint64 too large");
            }
            writer.uint32(24).uint64(message.titleId);
        }
        if (message.country !== "") {
            writer.uint32(34).string(message.country);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterTaskRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bossAppId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.titleId = reader.uint64();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.country = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
            titleId: isSet(object.titleId) ? BigInt(object.titleId) : 0n,
            country: isSet(object.country) ? globalThis.String(object.country) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.bossAppId !== "") {
            obj.bossAppId = message.bossAppId;
        }
        if (message.titleId !== 0n) {
            obj.titleId = message.titleId.toString();
        }
        if (message.country !== "") {
            obj.country = message.country;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterTaskRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRegisterTaskRequest();
        message.id = object.id ?? "";
        message.bossAppId = object.bossAppId ?? "";
        message.titleId = object.titleId ?? 0n;
        message.country = object.country ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseRegisterTaskResponse() {
    return { task: undefined };
}
exports.RegisterTaskResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.task !== undefined) {
            task_1.Task.encode(message.task, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterTaskResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.task = task_1.Task.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { task: isSet(object.task) ? task_1.Task.fromJSON(object.task) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.task !== undefined) {
            obj.task = task_1.Task.toJSON(message.task);
        }
        return obj;
    },
    create(base) {
        return exports.RegisterTaskResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRegisterTaskResponse();
        message.task = (object.task !== undefined && object.task !== null) ? task_1.Task.fromPartial(object.task) : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
