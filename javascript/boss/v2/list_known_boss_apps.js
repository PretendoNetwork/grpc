"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/list_known_boss_apps.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListKnownBOSSAppsResponse = exports.ListKnownBOSSAppsRequest = exports.BOSSApp = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "boss.v2";
function createBaseBOSSApp() {
    return { bossAppId: "", titleId: 0n, titleRegion: "", name: "", tasks: [] };
}
exports.BOSSApp = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bossAppId !== "") {
            writer.uint32(10).string(message.bossAppId);
        }
        if (message.titleId !== 0n) {
            if (BigInt.asUintN(64, message.titleId) !== message.titleId) {
                throw new globalThis.Error("value provided for field message.titleId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.titleId);
        }
        if (message.titleRegion !== "") {
            writer.uint32(26).string(message.titleRegion);
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        for (const v of message.tasks) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBOSSApp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bossAppId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.titleId = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.titleRegion = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tasks.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
            titleId: isSet(object.titleId) ? BigInt(object.titleId) : 0n,
            titleRegion: isSet(object.titleRegion) ? globalThis.String(object.titleRegion) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bossAppId !== "") {
            obj.bossAppId = message.bossAppId;
        }
        if (message.titleId !== 0n) {
            obj.titleId = message.titleId.toString();
        }
        if (message.titleRegion !== "") {
            obj.titleRegion = message.titleRegion;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.tasks?.length) {
            obj.tasks = message.tasks;
        }
        return obj;
    },
    create(base) {
        return exports.BOSSApp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBOSSApp();
        message.bossAppId = object.bossAppId ?? "";
        message.titleId = object.titleId ?? 0n;
        message.titleRegion = object.titleRegion ?? "";
        message.name = object.name ?? "";
        message.tasks = object.tasks?.map((e) => e) || [];
        return message;
    },
};
function createBaseListKnownBOSSAppsRequest() {
    return {};
}
exports.ListKnownBOSSAppsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListKnownBOSSAppsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListKnownBOSSAppsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListKnownBOSSAppsRequest();
        return message;
    },
};
function createBaseListKnownBOSSAppsResponse() {
    return { apps: [] };
}
exports.ListKnownBOSSAppsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.apps) {
            exports.BOSSApp.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListKnownBOSSAppsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apps.push(exports.BOSSApp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { apps: globalThis.Array.isArray(object?.apps) ? object.apps.map((e) => exports.BOSSApp.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.apps?.length) {
            obj.apps = message.apps.map((e) => exports.BOSSApp.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListKnownBOSSAppsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListKnownBOSSAppsResponse();
        message.apps = object.apps?.map((e) => exports.BOSSApp.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
