/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,output_javascript,output_legacy_commonjs,ts_nocheck
// @generated from protobuf file "boss/v2/list_files.proto" (package "boss.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListFilesResponse = exports.ListFilesRequest = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const file_1 = require("./file");
// @generated message type with reflection information, may provide speed optimized methods
class ListFilesRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("boss.v2.ListFilesRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "boss_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.taskId = "";
        message.bossAppId = "";
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string boss_app_id */ 2:
                    message.bossAppId = reader.string();
                    break;
                case /* optional string country */ 3:
                    message.country = reader.string();
                    break;
                case /* optional string language */ 4:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.taskId);
        /* string boss_app_id = 2; */
        if (message.bossAppId !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.bossAppId);
        /* optional string country = 3; */
        if (message.country !== undefined)
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.country);
        /* optional string language = 4; */
        if (message.language !== undefined)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message boss.v2.ListFilesRequest
 */
exports.ListFilesRequest = new ListFilesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListFilesResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("boss.v2.ListFilesResponse", [
            { no: 1, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => file_1.File }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.files = [];
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated boss.v2.File files */ 1:
                    message.files.push(file_1.File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated boss.v2.File files = 1; */
        for (let i = 0; i < message.files.length; i++)
            file_1.File.internalBinaryWrite(message.files[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message boss.v2.ListFilesResponse
 */
exports.ListFilesResponse = new ListFilesResponse$Type();
