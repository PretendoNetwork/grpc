/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,output_javascript,output_legacy_commonjs,ts_nocheck
// @generated from protobuf file "boss/v2/task.proto" (package "boss.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends runtime_4.MessageType {
    constructor() {
        super("boss.v2.Task", [
            { no: 1, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "in_game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "boss_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "creator_pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "title_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "updated_timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.deleted = false;
        message.id = "";
        message.inGameId = "";
        message.bossAppId = "";
        message.creatorPid = 0;
        message.status = "";
        message.titleId = "";
        message.description = "";
        message.createdTimestamp = 0n;
        message.updatedTimestamp = 0n;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool deleted */ 1:
                    message.deleted = reader.bool();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string in_game_id */ 3:
                    message.inGameId = reader.string();
                    break;
                case /* string boss_app_id */ 4:
                    message.bossAppId = reader.string();
                    break;
                case /* uint32 creator_pid */ 5:
                    message.creatorPid = reader.uint32();
                    break;
                case /* string status */ 6:
                    message.status = reader.string();
                    break;
                case /* string title_id */ 7:
                    message.titleId = reader.string();
                    break;
                case /* string description */ 8:
                    message.description = reader.string();
                    break;
                case /* uint64 created_timestamp */ 9:
                    message.createdTimestamp = reader.uint64().toBigInt();
                    break;
                case /* uint64 updated_timestamp */ 10:
                    message.updatedTimestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool deleted = 1; */
        if (message.deleted !== false)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.deleted);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.id);
        /* string in_game_id = 3; */
        if (message.inGameId !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.inGameId);
        /* string boss_app_id = 4; */
        if (message.bossAppId !== "")
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.bossAppId);
        /* uint32 creator_pid = 5; */
        if (message.creatorPid !== 0)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.creatorPid);
        /* string status = 6; */
        if (message.status !== "")
            writer.tag(6, runtime_1.WireType.LengthDelimited).string(message.status);
        /* string title_id = 7; */
        if (message.titleId !== "")
            writer.tag(7, runtime_1.WireType.LengthDelimited).string(message.titleId);
        /* string description = 8; */
        if (message.description !== "")
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.description);
        /* uint64 created_timestamp = 9; */
        if (message.createdTimestamp !== 0n)
            writer.tag(9, runtime_1.WireType.Varint).uint64(message.createdTimestamp);
        /* uint64 updated_timestamp = 10; */
        if (message.updatedTimestamp !== 0n)
            writer.tag(10, runtime_1.WireType.Varint).uint64(message.updatedTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message boss.v2.Task
 */
exports.Task = new Task$Type();
