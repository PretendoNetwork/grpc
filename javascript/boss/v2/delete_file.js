"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/delete_file.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteFileResponse = exports.DeleteFileRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "boss.v2";
function createBaseDeleteFileRequest() {
    return { dataId: 0n, bossAppId: "" };
}
exports.DeleteFileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataId !== 0n) {
            if (BigInt.asUintN(64, message.dataId) !== message.dataId) {
                throw new globalThis.Error("value provided for field message.dataId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.dataId);
        }
        if (message.bossAppId !== "") {
            writer.uint32(18).string(message.bossAppId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dataId = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bossAppId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataId: isSet(object.dataId) ? BigInt(object.dataId) : 0n,
            bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataId !== 0n) {
            obj.dataId = message.dataId.toString();
        }
        if (message.bossAppId !== "") {
            obj.bossAppId = message.bossAppId;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteFileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteFileRequest();
        message.dataId = object.dataId ?? 0n;
        message.bossAppId = object.bossAppId ?? "";
        return message;
    },
};
function createBaseDeleteFileResponse() {
    return {};
}
exports.DeleteFileResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteFileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeleteFileResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeleteFileResponse();
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
