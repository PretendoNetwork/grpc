// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/upload_file_wup.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileAttributes } from "./file_attributes";
import { FileWUP } from "./file_wup";

export const protobufPackage = "boss.v2";

export interface UploadFileWUPRequest {
  taskId: string;
  bossAppId: string;
  supportedCountries: string[];
  supportedLanguages: string[];
  attributes: FileAttributes | undefined;
  name: string;
  type: string;
  notifyOnNew: string[];
  notifyLed: boolean;
  conditionPlayed: bigint;
  autoDelete: boolean;
  data: Buffer;
  nameEqualsDataId: boolean;
}

export interface UploadFileWUPResponse {
  file: FileWUP | undefined;
}

function createBaseUploadFileWUPRequest(): UploadFileWUPRequest {
  return {
    taskId: "",
    bossAppId: "",
    supportedCountries: [],
    supportedLanguages: [],
    attributes: undefined,
    name: "",
    type: "",
    notifyOnNew: [],
    notifyLed: false,
    conditionPlayed: 0n,
    autoDelete: false,
    data: Buffer.alloc(0),
    nameEqualsDataId: false,
  };
}

export const UploadFileWUPRequest: MessageFns<UploadFileWUPRequest> = {
  encode(message: UploadFileWUPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.bossAppId !== "") {
      writer.uint32(18).string(message.bossAppId);
    }
    for (const v of message.supportedCountries) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.supportedLanguages) {
      writer.uint32(34).string(v!);
    }
    if (message.attributes !== undefined) {
      FileAttributes.encode(message.attributes, writer.uint32(42).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(58).string(message.type);
    }
    for (const v of message.notifyOnNew) {
      writer.uint32(66).string(v!);
    }
    if (message.notifyLed !== false) {
      writer.uint32(72).bool(message.notifyLed);
    }
    if (message.conditionPlayed !== 0n) {
      if (BigInt.asUintN(64, message.conditionPlayed) !== message.conditionPlayed) {
        throw new globalThis.Error("value provided for field message.conditionPlayed of type uint64 too large");
      }
      writer.uint32(80).uint64(message.conditionPlayed);
    }
    if (message.autoDelete !== false) {
      writer.uint32(88).bool(message.autoDelete);
    }
    if (message.data.length !== 0) {
      writer.uint32(98).bytes(message.data);
    }
    if (message.nameEqualsDataId !== false) {
      writer.uint32(104).bool(message.nameEqualsDataId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFileWUPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFileWUPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bossAppId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.supportedCountries.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.supportedLanguages.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.attributes = FileAttributes.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.notifyOnNew.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.notifyLed = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.conditionPlayed = reader.uint64() as bigint;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.autoDelete = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.nameEqualsDataId = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFileWUPRequest {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
      supportedCountries: globalThis.Array.isArray(object?.supportedCountries)
        ? object.supportedCountries.map((e: any) => globalThis.String(e))
        : [],
      supportedLanguages: globalThis.Array.isArray(object?.supportedLanguages)
        ? object.supportedLanguages.map((e: any) => globalThis.String(e))
        : [],
      attributes: isSet(object.attributes) ? FileAttributes.fromJSON(object.attributes) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      notifyOnNew: globalThis.Array.isArray(object?.notifyOnNew)
        ? object.notifyOnNew.map((e: any) => globalThis.String(e))
        : [],
      notifyLed: isSet(object.notifyLed) ? globalThis.Boolean(object.notifyLed) : false,
      conditionPlayed: isSet(object.conditionPlayed) ? BigInt(object.conditionPlayed) : 0n,
      autoDelete: isSet(object.autoDelete) ? globalThis.Boolean(object.autoDelete) : false,
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : Buffer.alloc(0),
      nameEqualsDataId: isSet(object.nameEqualsDataId) ? globalThis.Boolean(object.nameEqualsDataId) : false,
    };
  },

  toJSON(message: UploadFileWUPRequest): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.bossAppId !== "") {
      obj.bossAppId = message.bossAppId;
    }
    if (message.supportedCountries?.length) {
      obj.supportedCountries = message.supportedCountries;
    }
    if (message.supportedLanguages?.length) {
      obj.supportedLanguages = message.supportedLanguages;
    }
    if (message.attributes !== undefined) {
      obj.attributes = FileAttributes.toJSON(message.attributes);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.notifyOnNew?.length) {
      obj.notifyOnNew = message.notifyOnNew;
    }
    if (message.notifyLed !== false) {
      obj.notifyLed = message.notifyLed;
    }
    if (message.conditionPlayed !== 0n) {
      obj.conditionPlayed = message.conditionPlayed.toString();
    }
    if (message.autoDelete !== false) {
      obj.autoDelete = message.autoDelete;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.nameEqualsDataId !== false) {
      obj.nameEqualsDataId = message.nameEqualsDataId;
    }
    return obj;
  },

  create(base?: DeepPartial<UploadFileWUPRequest>): UploadFileWUPRequest {
    return UploadFileWUPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadFileWUPRequest>): UploadFileWUPRequest {
    const message = createBaseUploadFileWUPRequest();
    message.taskId = object.taskId ?? "";
    message.bossAppId = object.bossAppId ?? "";
    message.supportedCountries = object.supportedCountries?.map((e) => e) || [];
    message.supportedLanguages = object.supportedLanguages?.map((e) => e) || [];
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? FileAttributes.fromPartial(object.attributes)
      : undefined;
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.notifyOnNew = object.notifyOnNew?.map((e) => e) || [];
    message.notifyLed = object.notifyLed ?? false;
    message.conditionPlayed = object.conditionPlayed ?? 0n;
    message.autoDelete = object.autoDelete ?? false;
    message.data = object.data ?? Buffer.alloc(0);
    message.nameEqualsDataId = object.nameEqualsDataId ?? false;
    return message;
  },
};

function createBaseUploadFileWUPResponse(): UploadFileWUPResponse {
  return { file: undefined };
}

export const UploadFileWUPResponse: MessageFns<UploadFileWUPResponse> = {
  encode(message: UploadFileWUPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.file !== undefined) {
      FileWUP.encode(message.file, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFileWUPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFileWUPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.file = FileWUP.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFileWUPResponse {
    return { file: isSet(object.file) ? FileWUP.fromJSON(object.file) : undefined };
  },

  toJSON(message: UploadFileWUPResponse): unknown {
    const obj: any = {};
    if (message.file !== undefined) {
      obj.file = FileWUP.toJSON(message.file);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadFileWUPResponse>): UploadFileWUPResponse {
    return UploadFileWUPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadFileWUPResponse>): UploadFileWUPResponse {
    const message = createBaseUploadFileWUPResponse();
    message.file = (object.file !== undefined && object.file !== null) ? FileWUP.fromPartial(object.file) : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
