// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/boss_service.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { DeleteFileRequest, DeleteFileResponse } from "./delete_file";
import { DeleteTaskRequest, DeleteTaskResponse } from "./delete_task";
import { ListFilesCTRRequest, ListFilesCTRResponse } from "./list_files_ctr";
import { ListFilesWUPRequest, ListFilesWUPResponse } from "./list_files_wup";
import { ListKnownBOSSAppsRequest, ListKnownBOSSAppsResponse } from "./list_known_boss_apps";
import { ListTasksRequest, ListTasksResponse } from "./list_tasks";
import { RegisterTaskRequest, RegisterTaskResponse } from "./register_task";
import { UpdateFileMetadataCTRRequest, UpdateFileMetadataCTRResponse } from "./update_file_metadata_ctr";
import { UpdateFileMetadataWUPRequest, UpdateFileMetadataWUPResponse } from "./update_file_metadata_wup";
import { UpdateTaskRequest, UpdateTaskResponse } from "./update_task";
import { UploadFileCTRRequest, UploadFileCTRResponse } from "./upload_file_ctr";
import { UploadFileWUPRequest, UploadFileWUPResponse } from "./upload_file_wup";

export const protobufPackage = "boss.v2";

export type BossServiceDefinition = typeof BossServiceDefinition;
export const BossServiceDefinition = {
  name: "BossService",
  fullName: "boss.v2.BossService",
  methods: {
    listKnownBOSSApps: {
      name: "ListKnownBOSSApps",
      requestType: ListKnownBOSSAppsRequest,
      requestStream: false,
      responseType: ListKnownBOSSAppsResponse,
      responseStream: false,
      options: {},
    },
    listTasks: {
      name: "ListTasks",
      requestType: ListTasksRequest,
      requestStream: false,
      responseType: ListTasksResponse,
      responseStream: false,
      options: {},
    },
    registerTask: {
      name: "RegisterTask",
      requestType: RegisterTaskRequest,
      requestStream: false,
      responseType: RegisterTaskResponse,
      responseStream: false,
      options: {},
    },
    updateTask: {
      name: "UpdateTask",
      requestType: UpdateTaskRequest,
      requestStream: false,
      responseType: UpdateTaskResponse,
      responseStream: false,
      options: {},
    },
    deleteTask: {
      name: "DeleteTask",
      requestType: DeleteTaskRequest,
      requestStream: false,
      responseType: DeleteTaskResponse,
      responseStream: false,
      options: {},
    },
    deleteFile: {
      name: "DeleteFile",
      requestType: DeleteFileRequest,
      requestStream: false,
      responseType: DeleteFileResponse,
      responseStream: false,
      options: {},
    },
    listFilesWUP: {
      name: "ListFilesWUP",
      requestType: ListFilesWUPRequest,
      requestStream: false,
      responseType: ListFilesWUPResponse,
      responseStream: false,
      options: {},
    },
    uploadFileWUP: {
      name: "UploadFileWUP",
      requestType: UploadFileWUPRequest,
      requestStream: false,
      responseType: UploadFileWUPResponse,
      responseStream: false,
      options: {},
    },
    updateFileMetadataWUP: {
      name: "UpdateFileMetadataWUP",
      requestType: UpdateFileMetadataWUPRequest,
      requestStream: false,
      responseType: UpdateFileMetadataWUPResponse,
      responseStream: false,
      options: {},
    },
    listFilesCTR: {
      name: "ListFilesCTR",
      requestType: ListFilesCTRRequest,
      requestStream: false,
      responseType: ListFilesCTRResponse,
      responseStream: false,
      options: {},
    },
    uploadFileCTR: {
      name: "UploadFileCTR",
      requestType: UploadFileCTRRequest,
      requestStream: false,
      responseType: UploadFileCTRResponse,
      responseStream: false,
      options: {},
    },
    updateFileMetadataCTR: {
      name: "UpdateFileMetadataCTR",
      requestType: UpdateFileMetadataCTRRequest,
      requestStream: false,
      responseType: UpdateFileMetadataCTRResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface BossServiceImplementation<CallContextExt = {}> {
  listKnownBOSSApps(
    request: ListKnownBOSSAppsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListKnownBOSSAppsResponse>>;
  listTasks(request: ListTasksRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListTasksResponse>>;
  registerTask(
    request: RegisterTaskRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegisterTaskResponse>>;
  updateTask(
    request: UpdateTaskRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateTaskResponse>>;
  deleteTask(
    request: DeleteTaskRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteTaskResponse>>;
  deleteFile(
    request: DeleteFileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteFileResponse>>;
  listFilesWUP(
    request: ListFilesWUPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFilesWUPResponse>>;
  uploadFileWUP(
    request: UploadFileWUPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UploadFileWUPResponse>>;
  updateFileMetadataWUP(
    request: UpdateFileMetadataWUPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateFileMetadataWUPResponse>>;
  listFilesCTR(
    request: ListFilesCTRRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFilesCTRResponse>>;
  uploadFileCTR(
    request: UploadFileCTRRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UploadFileCTRResponse>>;
  updateFileMetadataCTR(
    request: UpdateFileMetadataCTRRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateFileMetadataCTRResponse>>;
}

export interface BossServiceClient<CallOptionsExt = {}> {
  listKnownBOSSApps(
    request: DeepPartial<ListKnownBOSSAppsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListKnownBOSSAppsResponse>;
  listTasks(request: DeepPartial<ListTasksRequest>, options?: CallOptions & CallOptionsExt): Promise<ListTasksResponse>;
  registerTask(
    request: DeepPartial<RegisterTaskRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegisterTaskResponse>;
  updateTask(
    request: DeepPartial<UpdateTaskRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateTaskResponse>;
  deleteTask(
    request: DeepPartial<DeleteTaskRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteTaskResponse>;
  deleteFile(
    request: DeepPartial<DeleteFileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteFileResponse>;
  listFilesWUP(
    request: DeepPartial<ListFilesWUPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFilesWUPResponse>;
  uploadFileWUP(
    request: DeepPartial<UploadFileWUPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UploadFileWUPResponse>;
  updateFileMetadataWUP(
    request: DeepPartial<UpdateFileMetadataWUPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateFileMetadataWUPResponse>;
  listFilesCTR(
    request: DeepPartial<ListFilesCTRRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFilesCTRResponse>;
  uploadFileCTR(
    request: DeepPartial<UploadFileCTRRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UploadFileCTRResponse>;
  updateFileMetadataCTR(
    request: DeepPartial<UpdateFileMetadataCTRRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateFileMetadataCTRResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
