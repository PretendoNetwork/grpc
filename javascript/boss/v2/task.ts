// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "boss.v2";

export interface Task {
  deleted: boolean;
  id: string;
  inGameId: string;
  bossAppId: string;
  creatorPid: number;
  status: string;
  interval: number;
  titleId: bigint;
  description: string;
  createdTimestamp: bigint;
  updatedTimestamp: bigint;
}

function createBaseTask(): Task {
  return {
    deleted: false,
    id: "",
    inGameId: "",
    bossAppId: "",
    creatorPid: 0,
    status: "",
    interval: 0,
    titleId: 0n,
    description: "",
    createdTimestamp: 0n,
    updatedTimestamp: 0n,
  };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deleted !== false) {
      writer.uint32(8).bool(message.deleted);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.inGameId !== "") {
      writer.uint32(26).string(message.inGameId);
    }
    if (message.bossAppId !== "") {
      writer.uint32(34).string(message.bossAppId);
    }
    if (message.creatorPid !== 0) {
      writer.uint32(40).uint32(message.creatorPid);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.interval !== 0) {
      writer.uint32(56).uint32(message.interval);
    }
    if (message.titleId !== 0n) {
      if (BigInt.asUintN(64, message.titleId) !== message.titleId) {
        throw new globalThis.Error("value provided for field message.titleId of type uint64 too large");
      }
      writer.uint32(64).uint64(message.titleId);
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    if (message.createdTimestamp !== 0n) {
      if (BigInt.asUintN(64, message.createdTimestamp) !== message.createdTimestamp) {
        throw new globalThis.Error("value provided for field message.createdTimestamp of type uint64 too large");
      }
      writer.uint32(80).uint64(message.createdTimestamp);
    }
    if (message.updatedTimestamp !== 0n) {
      if (BigInt.asUintN(64, message.updatedTimestamp) !== message.updatedTimestamp) {
        throw new globalThis.Error("value provided for field message.updatedTimestamp of type uint64 too large");
      }
      writer.uint32(88).uint64(message.updatedTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inGameId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bossAppId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creatorPid = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.interval = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.titleId = reader.uint64() as bigint;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.createdTimestamp = reader.uint64() as bigint;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.updatedTimestamp = reader.uint64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      inGameId: isSet(object.inGameId) ? globalThis.String(object.inGameId) : "",
      bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
      creatorPid: isSet(object.creatorPid) ? globalThis.Number(object.creatorPid) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      interval: isSet(object.interval) ? globalThis.Number(object.interval) : 0,
      titleId: isSet(object.titleId) ? BigInt(object.titleId) : 0n,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdTimestamp: isSet(object.createdTimestamp) ? BigInt(object.createdTimestamp) : 0n,
      updatedTimestamp: isSet(object.updatedTimestamp) ? BigInt(object.updatedTimestamp) : 0n,
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.deleted !== false) {
      obj.deleted = message.deleted;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.inGameId !== "") {
      obj.inGameId = message.inGameId;
    }
    if (message.bossAppId !== "") {
      obj.bossAppId = message.bossAppId;
    }
    if (message.creatorPid !== 0) {
      obj.creatorPid = Math.round(message.creatorPid);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.interval !== 0) {
      obj.interval = Math.round(message.interval);
    }
    if (message.titleId !== 0n) {
      obj.titleId = message.titleId.toString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdTimestamp !== 0n) {
      obj.createdTimestamp = message.createdTimestamp.toString();
    }
    if (message.updatedTimestamp !== 0n) {
      obj.updatedTimestamp = message.updatedTimestamp.toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Task>): Task {
    return Task.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Task>): Task {
    const message = createBaseTask();
    message.deleted = object.deleted ?? false;
    message.id = object.id ?? "";
    message.inGameId = object.inGameId ?? "";
    message.bossAppId = object.bossAppId ?? "";
    message.creatorPid = object.creatorPid ?? 0;
    message.status = object.status ?? "";
    message.interval = object.interval ?? 0;
    message.titleId = object.titleId ?? 0n;
    message.description = object.description ?? "";
    message.createdTimestamp = object.createdTimestamp ?? 0n;
    message.updatedTimestamp = object.updatedTimestamp ?? 0n;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
