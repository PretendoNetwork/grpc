"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/list_files_ctr.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListFilesCTRResponse = exports.ListFilesCTRRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const file_ctr_1 = require("./file_ctr");
exports.protobufPackage = "boss.v2";
function createBaseListFilesCTRRequest() {
    return { taskId: "", bossAppId: "", country: undefined, language: undefined };
}
exports.ListFilesCTRRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskId !== "") {
            writer.uint32(10).string(message.taskId);
        }
        if (message.bossAppId !== "") {
            writer.uint32(18).string(message.bossAppId);
        }
        if (message.country !== undefined) {
            writer.uint32(26).string(message.country);
        }
        if (message.language !== undefined) {
            writer.uint32(34).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFilesCTRRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.taskId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bossAppId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.country = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
            bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
            country: isSet(object.country) ? globalThis.String(object.country) : undefined,
            language: isSet(object.language) ? globalThis.String(object.language) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.taskId !== "") {
            obj.taskId = message.taskId;
        }
        if (message.bossAppId !== "") {
            obj.bossAppId = message.bossAppId;
        }
        if (message.country !== undefined) {
            obj.country = message.country;
        }
        if (message.language !== undefined) {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ListFilesCTRRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFilesCTRRequest();
        message.taskId = object.taskId ?? "";
        message.bossAppId = object.bossAppId ?? "";
        message.country = object.country ?? undefined;
        message.language = object.language ?? undefined;
        return message;
    },
};
function createBaseListFilesCTRResponse() {
    return { files: [] };
}
exports.ListFilesCTRResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.files) {
            file_ctr_1.FileCTR.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFilesCTRResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.files.push(file_ctr_1.FileCTR.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { files: globalThis.Array.isArray(object?.files) ? object.files.map((e) => file_ctr_1.FileCTR.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.files?.length) {
            obj.files = message.files.map((e) => file_ctr_1.FileCTR.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListFilesCTRResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFilesCTRResponse();
        message.files = object.files?.map((e) => file_ctr_1.FileCTR.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
