"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/payload_content_info_ctr.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayloadContentInfoCTR = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "boss.v2";
function createBasePayloadContentInfoCTR() {
    return { titleId: 0n, contentDatatype: 0, nsDataId: 0, version: 0, size: 0 };
}
exports.PayloadContentInfoCTR = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.titleId !== 0n) {
            if (BigInt.asUintN(64, message.titleId) !== message.titleId) {
                throw new globalThis.Error("value provided for field message.titleId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.titleId);
        }
        if (message.contentDatatype !== 0) {
            writer.uint32(16).uint32(message.contentDatatype);
        }
        if (message.nsDataId !== 0) {
            writer.uint32(24).uint32(message.nsDataId);
        }
        if (message.version !== 0) {
            writer.uint32(32).uint32(message.version);
        }
        if (message.size !== 0) {
            writer.uint32(40).uint32(message.size);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePayloadContentInfoCTR();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.titleId = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.contentDatatype = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nsDataId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.version = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.size = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            titleId: isSet(object.titleId) ? BigInt(object.titleId) : 0n,
            contentDatatype: isSet(object.contentDatatype) ? globalThis.Number(object.contentDatatype) : 0,
            nsDataId: isSet(object.nsDataId) ? globalThis.Number(object.nsDataId) : 0,
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            size: isSet(object.size) ? globalThis.Number(object.size) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.titleId !== 0n) {
            obj.titleId = message.titleId.toString();
        }
        if (message.contentDatatype !== 0) {
            obj.contentDatatype = Math.round(message.contentDatatype);
        }
        if (message.nsDataId !== 0) {
            obj.nsDataId = Math.round(message.nsDataId);
        }
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.size !== 0) {
            obj.size = Math.round(message.size);
        }
        return obj;
    },
    create(base) {
        return exports.PayloadContentInfoCTR.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePayloadContentInfoCTR();
        message.titleId = object.titleId ?? 0n;
        message.contentDatatype = object.contentDatatype ?? 0;
        message.nsDataId = object.nsDataId ?? 0;
        message.version = object.version ?? 0;
        message.size = object.size ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
