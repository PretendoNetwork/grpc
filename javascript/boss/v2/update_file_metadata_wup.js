"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/update_file_metadata_wup.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateFileMetadataWUPResponse = exports.UpdateFileMetadataWUPRequest = exports.UpdateFileMetadataDataWUP = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const file_attributes_1 = require("./file_attributes");
exports.protobufPackage = "boss.v2";
function createBaseUpdateFileMetadataDataWUP() {
    return {
        taskId: "",
        bossAppId: "",
        supportedCountries: [],
        supportedLanguages: [],
        attributes: undefined,
        name: "",
        type: "",
        notifyOnNew: [],
        notifyLed: false,
        conditionPlayed: 0n,
        autoDelete: false,
    };
}
exports.UpdateFileMetadataDataWUP = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskId !== "") {
            writer.uint32(10).string(message.taskId);
        }
        if (message.bossAppId !== "") {
            writer.uint32(18).string(message.bossAppId);
        }
        for (const v of message.supportedCountries) {
            writer.uint32(26).string(v);
        }
        for (const v of message.supportedLanguages) {
            writer.uint32(34).string(v);
        }
        if (message.attributes !== undefined) {
            file_attributes_1.FileAttributes.encode(message.attributes, writer.uint32(42).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(50).string(message.name);
        }
        if (message.type !== "") {
            writer.uint32(58).string(message.type);
        }
        for (const v of message.notifyOnNew) {
            writer.uint32(66).string(v);
        }
        if (message.notifyLed !== false) {
            writer.uint32(72).bool(message.notifyLed);
        }
        if (message.conditionPlayed !== 0n) {
            if (BigInt.asUintN(64, message.conditionPlayed) !== message.conditionPlayed) {
                throw new globalThis.Error("value provided for field message.conditionPlayed of type uint64 too large");
            }
            writer.uint32(80).uint64(message.conditionPlayed);
        }
        if (message.autoDelete !== false) {
            writer.uint32(88).bool(message.autoDelete);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateFileMetadataDataWUP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.taskId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bossAppId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.supportedCountries.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.supportedLanguages.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.attributes = file_attributes_1.FileAttributes.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.notifyOnNew.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.notifyLed = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.conditionPlayed = reader.uint64();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.autoDelete = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
            bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
            supportedCountries: globalThis.Array.isArray(object?.supportedCountries)
                ? object.supportedCountries.map((e) => globalThis.String(e))
                : [],
            supportedLanguages: globalThis.Array.isArray(object?.supportedLanguages)
                ? object.supportedLanguages.map((e) => globalThis.String(e))
                : [],
            attributes: isSet(object.attributes) ? file_attributes_1.FileAttributes.fromJSON(object.attributes) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            notifyOnNew: globalThis.Array.isArray(object?.notifyOnNew)
                ? object.notifyOnNew.map((e) => globalThis.String(e))
                : [],
            notifyLed: isSet(object.notifyLed) ? globalThis.Boolean(object.notifyLed) : false,
            conditionPlayed: isSet(object.conditionPlayed) ? BigInt(object.conditionPlayed) : 0n,
            autoDelete: isSet(object.autoDelete) ? globalThis.Boolean(object.autoDelete) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.taskId !== "") {
            obj.taskId = message.taskId;
        }
        if (message.bossAppId !== "") {
            obj.bossAppId = message.bossAppId;
        }
        if (message.supportedCountries?.length) {
            obj.supportedCountries = message.supportedCountries;
        }
        if (message.supportedLanguages?.length) {
            obj.supportedLanguages = message.supportedLanguages;
        }
        if (message.attributes !== undefined) {
            obj.attributes = file_attributes_1.FileAttributes.toJSON(message.attributes);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.notifyOnNew?.length) {
            obj.notifyOnNew = message.notifyOnNew;
        }
        if (message.notifyLed !== false) {
            obj.notifyLed = message.notifyLed;
        }
        if (message.conditionPlayed !== 0n) {
            obj.conditionPlayed = message.conditionPlayed.toString();
        }
        if (message.autoDelete !== false) {
            obj.autoDelete = message.autoDelete;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateFileMetadataDataWUP.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateFileMetadataDataWUP();
        message.taskId = object.taskId ?? "";
        message.bossAppId = object.bossAppId ?? "";
        message.supportedCountries = object.supportedCountries?.map((e) => e) || [];
        message.supportedLanguages = object.supportedLanguages?.map((e) => e) || [];
        message.attributes = (object.attributes !== undefined && object.attributes !== null)
            ? file_attributes_1.FileAttributes.fromPartial(object.attributes)
            : undefined;
        message.name = object.name ?? "";
        message.type = object.type ?? "";
        message.notifyOnNew = object.notifyOnNew?.map((e) => e) || [];
        message.notifyLed = object.notifyLed ?? false;
        message.conditionPlayed = object.conditionPlayed ?? 0n;
        message.autoDelete = object.autoDelete ?? false;
        return message;
    },
};
function createBaseUpdateFileMetadataWUPRequest() {
    return { dataId: 0n, updateData: undefined };
}
exports.UpdateFileMetadataWUPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataId !== 0n) {
            if (BigInt.asUintN(64, message.dataId) !== message.dataId) {
                throw new globalThis.Error("value provided for field message.dataId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.dataId);
        }
        if (message.updateData !== undefined) {
            exports.UpdateFileMetadataDataWUP.encode(message.updateData, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateFileMetadataWUPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dataId = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.updateData = exports.UpdateFileMetadataDataWUP.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataId: isSet(object.dataId) ? BigInt(object.dataId) : 0n,
            updateData: isSet(object.updateData) ? exports.UpdateFileMetadataDataWUP.fromJSON(object.updateData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataId !== 0n) {
            obj.dataId = message.dataId.toString();
        }
        if (message.updateData !== undefined) {
            obj.updateData = exports.UpdateFileMetadataDataWUP.toJSON(message.updateData);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateFileMetadataWUPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateFileMetadataWUPRequest();
        message.dataId = object.dataId ?? 0n;
        message.updateData = (object.updateData !== undefined && object.updateData !== null)
            ? exports.UpdateFileMetadataDataWUP.fromPartial(object.updateData)
            : undefined;
        return message;
    },
};
function createBaseUpdateFileMetadataWUPResponse() {
    return {};
}
exports.UpdateFileMetadataWUPResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateFileMetadataWUPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.UpdateFileMetadataWUPResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseUpdateFileMetadataWUPResponse();
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
