"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/v2/file_ctr.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileCTR = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const ctr_boss_flags_1 = require("./ctr_boss_flags");
const file_attributes_1 = require("./file_attributes");
const payload_content_info_ctr_1 = require("./payload_content_info_ctr");
exports.protobufPackage = "boss.v2";
function createBaseFileCTR() {
    return {
        deleted: false,
        dataId: 0n,
        taskId: "",
        bossAppId: "",
        supportedCountries: [],
        supportedLanguages: [],
        attributes: undefined,
        creatorPid: 0,
        name: "",
        hash: "",
        serialNumber: 0,
        payloadContents: [],
        size: 0n,
        createdTimestamp: 0n,
        updatedTimestamp: 0n,
        flags: undefined,
    };
}
exports.FileCTR = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.deleted !== false) {
            writer.uint32(8).bool(message.deleted);
        }
        if (message.dataId !== 0n) {
            if (BigInt.asUintN(64, message.dataId) !== message.dataId) {
                throw new globalThis.Error("value provided for field message.dataId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.dataId);
        }
        if (message.taskId !== "") {
            writer.uint32(26).string(message.taskId);
        }
        if (message.bossAppId !== "") {
            writer.uint32(34).string(message.bossAppId);
        }
        for (const v of message.supportedCountries) {
            writer.uint32(42).string(v);
        }
        for (const v of message.supportedLanguages) {
            writer.uint32(50).string(v);
        }
        if (message.attributes !== undefined) {
            file_attributes_1.FileAttributes.encode(message.attributes, writer.uint32(58).fork()).join();
        }
        if (message.creatorPid !== 0) {
            writer.uint32(64).uint32(message.creatorPid);
        }
        if (message.name !== "") {
            writer.uint32(74).string(message.name);
        }
        if (message.hash !== "") {
            writer.uint32(82).string(message.hash);
        }
        if (message.serialNumber !== 0) {
            writer.uint32(88).uint32(message.serialNumber);
        }
        for (const v of message.payloadContents) {
            payload_content_info_ctr_1.PayloadContentInfoCTR.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.size !== 0n) {
            if (BigInt.asUintN(64, message.size) !== message.size) {
                throw new globalThis.Error("value provided for field message.size of type uint64 too large");
            }
            writer.uint32(104).uint64(message.size);
        }
        if (message.createdTimestamp !== 0n) {
            if (BigInt.asUintN(64, message.createdTimestamp) !== message.createdTimestamp) {
                throw new globalThis.Error("value provided for field message.createdTimestamp of type uint64 too large");
            }
            writer.uint32(112).uint64(message.createdTimestamp);
        }
        if (message.updatedTimestamp !== 0n) {
            if (BigInt.asUintN(64, message.updatedTimestamp) !== message.updatedTimestamp) {
                throw new globalThis.Error("value provided for field message.updatedTimestamp of type uint64 too large");
            }
            writer.uint32(120).uint64(message.updatedTimestamp);
        }
        if (message.flags !== undefined) {
            ctr_boss_flags_1.CTRBOSSFlags.encode(message.flags, writer.uint32(130).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileCTR();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.deleted = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.dataId = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.taskId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.bossAppId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.supportedCountries.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.supportedLanguages.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.attributes = file_attributes_1.FileAttributes.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.creatorPid = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.serialNumber = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.payloadContents.push(payload_content_info_ctr_1.PayloadContentInfoCTR.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.size = reader.uint64();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.createdTimestamp = reader.uint64();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.updatedTimestamp = reader.uint64();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.flags = ctr_boss_flags_1.CTRBOSSFlags.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false,
            dataId: isSet(object.dataId) ? BigInt(object.dataId) : 0n,
            taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
            bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
            supportedCountries: globalThis.Array.isArray(object?.supportedCountries)
                ? object.supportedCountries.map((e) => globalThis.String(e))
                : [],
            supportedLanguages: globalThis.Array.isArray(object?.supportedLanguages)
                ? object.supportedLanguages.map((e) => globalThis.String(e))
                : [],
            attributes: isSet(object.attributes) ? file_attributes_1.FileAttributes.fromJSON(object.attributes) : undefined,
            creatorPid: isSet(object.creatorPid) ? globalThis.Number(object.creatorPid) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            serialNumber: isSet(object.serialNumber) ? globalThis.Number(object.serialNumber) : 0,
            payloadContents: globalThis.Array.isArray(object?.payloadContents)
                ? object.payloadContents.map((e) => payload_content_info_ctr_1.PayloadContentInfoCTR.fromJSON(e))
                : [],
            size: isSet(object.size) ? BigInt(object.size) : 0n,
            createdTimestamp: isSet(object.createdTimestamp) ? BigInt(object.createdTimestamp) : 0n,
            updatedTimestamp: isSet(object.updatedTimestamp) ? BigInt(object.updatedTimestamp) : 0n,
            flags: isSet(object.flags) ? ctr_boss_flags_1.CTRBOSSFlags.fromJSON(object.flags) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.deleted !== false) {
            obj.deleted = message.deleted;
        }
        if (message.dataId !== 0n) {
            obj.dataId = message.dataId.toString();
        }
        if (message.taskId !== "") {
            obj.taskId = message.taskId;
        }
        if (message.bossAppId !== "") {
            obj.bossAppId = message.bossAppId;
        }
        if (message.supportedCountries?.length) {
            obj.supportedCountries = message.supportedCountries;
        }
        if (message.supportedLanguages?.length) {
            obj.supportedLanguages = message.supportedLanguages;
        }
        if (message.attributes !== undefined) {
            obj.attributes = file_attributes_1.FileAttributes.toJSON(message.attributes);
        }
        if (message.creatorPid !== 0) {
            obj.creatorPid = Math.round(message.creatorPid);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.serialNumber !== 0) {
            obj.serialNumber = Math.round(message.serialNumber);
        }
        if (message.payloadContents?.length) {
            obj.payloadContents = message.payloadContents.map((e) => payload_content_info_ctr_1.PayloadContentInfoCTR.toJSON(e));
        }
        if (message.size !== 0n) {
            obj.size = message.size.toString();
        }
        if (message.createdTimestamp !== 0n) {
            obj.createdTimestamp = message.createdTimestamp.toString();
        }
        if (message.updatedTimestamp !== 0n) {
            obj.updatedTimestamp = message.updatedTimestamp.toString();
        }
        if (message.flags !== undefined) {
            obj.flags = ctr_boss_flags_1.CTRBOSSFlags.toJSON(message.flags);
        }
        return obj;
    },
    create(base) {
        return exports.FileCTR.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFileCTR();
        message.deleted = object.deleted ?? false;
        message.dataId = object.dataId ?? 0n;
        message.taskId = object.taskId ?? "";
        message.bossAppId = object.bossAppId ?? "";
        message.supportedCountries = object.supportedCountries?.map((e) => e) || [];
        message.supportedLanguages = object.supportedLanguages?.map((e) => e) || [];
        message.attributes = (object.attributes !== undefined && object.attributes !== null)
            ? file_attributes_1.FileAttributes.fromPartial(object.attributes)
            : undefined;
        message.creatorPid = object.creatorPid ?? 0;
        message.name = object.name ?? "";
        message.hash = object.hash ?? "";
        message.serialNumber = object.serialNumber ?? 0;
        message.payloadContents = object.payloadContents?.map((e) => payload_content_info_ctr_1.PayloadContentInfoCTR.fromPartial(e)) || [];
        message.size = object.size ?? 0n;
        message.createdTimestamp = object.createdTimestamp ?? 0n;
        message.updatedTimestamp = object.updatedTimestamp ?? 0n;
        message.flags = (object.flags !== undefined && object.flags !== null)
            ? ctr_boss_flags_1.CTRBOSSFlags.fromPartial(object.flags)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
