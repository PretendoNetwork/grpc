"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/upload_file.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadFileResponse = exports.UploadFileRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const file_1 = require("./file");
exports.protobufPackage = "boss";
function createBaseUploadFileRequest() {
    return {
        taskId: "",
        bossAppId: "",
        supportedCountries: [],
        supportedLanguages: [],
        password: "",
        attribute1: "",
        attribute2: "",
        attribute3: "",
        name: "",
        type: "",
        notifyOnNew: [],
        notifyLed: false,
        data: Buffer.alloc(0),
        nameEqualsDataId: false,
    };
}
exports.UploadFileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskId !== "") {
            writer.uint32(10).string(message.taskId);
        }
        if (message.bossAppId !== "") {
            writer.uint32(18).string(message.bossAppId);
        }
        for (const v of message.supportedCountries) {
            writer.uint32(26).string(v);
        }
        for (const v of message.supportedLanguages) {
            writer.uint32(34).string(v);
        }
        if (message.password !== "") {
            writer.uint32(42).string(message.password);
        }
        if (message.attribute1 !== "") {
            writer.uint32(50).string(message.attribute1);
        }
        if (message.attribute2 !== "") {
            writer.uint32(58).string(message.attribute2);
        }
        if (message.attribute3 !== "") {
            writer.uint32(66).string(message.attribute3);
        }
        if (message.name !== "") {
            writer.uint32(74).string(message.name);
        }
        if (message.type !== "") {
            writer.uint32(82).string(message.type);
        }
        for (const v of message.notifyOnNew) {
            writer.uint32(90).string(v);
        }
        if (message.notifyLed !== false) {
            writer.uint32(96).bool(message.notifyLed);
        }
        if (message.data.length !== 0) {
            writer.uint32(106).bytes(message.data);
        }
        if (message.nameEqualsDataId !== false) {
            writer.uint32(112).bool(message.nameEqualsDataId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.taskId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bossAppId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.supportedCountries.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.supportedLanguages.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.attribute1 = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.attribute2 = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.attribute3 = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.notifyOnNew.push(reader.string());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.notifyLed = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.data = Buffer.from(reader.bytes());
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.nameEqualsDataId = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
            bossAppId: isSet(object.bossAppId) ? globalThis.String(object.bossAppId) : "",
            supportedCountries: globalThis.Array.isArray(object?.supportedCountries)
                ? object.supportedCountries.map((e) => globalThis.String(e))
                : [],
            supportedLanguages: globalThis.Array.isArray(object?.supportedLanguages)
                ? object.supportedLanguages.map((e) => globalThis.String(e))
                : [],
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            attribute1: isSet(object.attribute1) ? globalThis.String(object.attribute1) : "",
            attribute2: isSet(object.attribute2) ? globalThis.String(object.attribute2) : "",
            attribute3: isSet(object.attribute3) ? globalThis.String(object.attribute3) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            notifyOnNew: globalThis.Array.isArray(object?.notifyOnNew)
                ? object.notifyOnNew.map((e) => globalThis.String(e))
                : [],
            notifyLed: isSet(object.notifyLed) ? globalThis.Boolean(object.notifyLed) : false,
            data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : Buffer.alloc(0),
            nameEqualsDataId: isSet(object.nameEqualsDataId) ? globalThis.Boolean(object.nameEqualsDataId) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.taskId !== "") {
            obj.taskId = message.taskId;
        }
        if (message.bossAppId !== "") {
            obj.bossAppId = message.bossAppId;
        }
        if (message.supportedCountries?.length) {
            obj.supportedCountries = message.supportedCountries;
        }
        if (message.supportedLanguages?.length) {
            obj.supportedLanguages = message.supportedLanguages;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.attribute1 !== "") {
            obj.attribute1 = message.attribute1;
        }
        if (message.attribute2 !== "") {
            obj.attribute2 = message.attribute2;
        }
        if (message.attribute3 !== "") {
            obj.attribute3 = message.attribute3;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.notifyOnNew?.length) {
            obj.notifyOnNew = message.notifyOnNew;
        }
        if (message.notifyLed !== false) {
            obj.notifyLed = message.notifyLed;
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.nameEqualsDataId !== false) {
            obj.nameEqualsDataId = message.nameEqualsDataId;
        }
        return obj;
    },
    create(base) {
        return exports.UploadFileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUploadFileRequest();
        message.taskId = object.taskId ?? "";
        message.bossAppId = object.bossAppId ?? "";
        message.supportedCountries = object.supportedCountries?.map((e) => e) || [];
        message.supportedLanguages = object.supportedLanguages?.map((e) => e) || [];
        message.password = object.password ?? "";
        message.attribute1 = object.attribute1 ?? "";
        message.attribute2 = object.attribute2 ?? "";
        message.attribute3 = object.attribute3 ?? "";
        message.name = object.name ?? "";
        message.type = object.type ?? "";
        message.notifyOnNew = object.notifyOnNew?.map((e) => e) || [];
        message.notifyLed = object.notifyLed ?? false;
        message.data = object.data ?? Buffer.alloc(0);
        message.nameEqualsDataId = object.nameEqualsDataId ?? false;
        return message;
    },
};
function createBaseUploadFileResponse() {
    return { file: undefined };
}
exports.UploadFileResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.file !== undefined) {
            file_1.File.encode(message.file, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadFileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.file = file_1.File.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { file: isSet(object.file) ? file_1.File.fromJSON(object.file) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.file !== undefined) {
            obj.file = file_1.File.toJSON(message.file);
        }
        return obj;
    },
    create(base) {
        return exports.UploadFileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUploadFileResponse();
        message.file = (object.file !== undefined && object.file !== null) ? file_1.File.fromPartial(object.file) : undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function isSet(value) {
    return value !== null && value !== undefined;
}
