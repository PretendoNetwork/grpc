"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: boss/list_tasks.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListTasksResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const task_1 = require("./task");
exports.protobufPackage = "boss";
function createBaseListTasksResponse() {
    return { tasks: [] };
}
exports.ListTasksResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tasks) {
            task_1.Task.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListTasksResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tasks.push(task_1.Task.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e) => task_1.Task.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.tasks?.length) {
            obj.tasks = message.tasks.map((e) => task_1.Task.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListTasksResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListTasksResponse();
        message.tasks = object.tasks?.map((e) => task_1.Task.fromPartial(e)) || [];
        return message;
    },
};
