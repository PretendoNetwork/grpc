"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: friends/get_user_friend_pids_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUserFriendPIDsResponse = exports.GetUserFriendPIDsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "friends";
function createBaseGetUserFriendPIDsRequest() {
    return { pid: 0 };
}
exports.GetUserFriendPIDsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pid !== 0) {
            writer.uint32(8).uint32(message.pid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserFriendPIDsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.pid !== 0) {
            obj.pid = Math.round(message.pid);
        }
        return obj;
    },
    create(base) {
        return exports.GetUserFriendPIDsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserFriendPIDsRequest();
        message.pid = object.pid ?? 0;
        return message;
    },
};
function createBaseGetUserFriendPIDsResponse() {
    return { pids: [] };
}
exports.GetUserFriendPIDsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.pids) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserFriendPIDsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.pids.push(reader.uint32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.pids.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { pids: globalThis.Array.isArray(object?.pids) ? object.pids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.pids?.length) {
            obj.pids = message.pids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetUserFriendPIDsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserFriendPIDsResponse();
        message.pids = object.pids?.map((e) => e) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
