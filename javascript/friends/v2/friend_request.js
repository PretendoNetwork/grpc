"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: friends/v2/friend_request.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.FriendRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "friends.v2";
function createBaseFriendRequest() {
    return { id: 0n, sender: 0, recipient: 0, sent: 0n, expires: 0n, message: "" };
}
exports.FriendRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new globalThis.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(8).uint64(message.id);
        }
        if (message.sender !== 0) {
            writer.uint32(16).uint32(message.sender);
        }
        if (message.recipient !== 0) {
            writer.uint32(24).uint32(message.recipient);
        }
        if (message.sent !== 0n) {
            if (BigInt.asUintN(64, message.sent) !== message.sent) {
                throw new globalThis.Error("value provided for field message.sent of type uint64 too large");
            }
            writer.uint32(32).uint64(message.sent);
        }
        if (message.expires !== 0n) {
            if (BigInt.asUintN(64, message.expires) !== message.expires) {
                throw new globalThis.Error("value provided for field message.expires of type uint64 too large");
            }
            writer.uint32(40).uint64(message.expires);
        }
        if (message.message !== "") {
            writer.uint32(50).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sender = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.recipient = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.sent = reader.uint64();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.expires = reader.uint64();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? BigInt(object.id) : 0n,
            sender: isSet(object.sender) ? globalThis.Number(object.sender) : 0,
            recipient: isSet(object.recipient) ? globalThis.Number(object.recipient) : 0,
            sent: isSet(object.sent) ? BigInt(object.sent) : 0n,
            expires: isSet(object.expires) ? BigInt(object.expires) : 0n,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        if (message.sender !== 0) {
            obj.sender = Math.round(message.sender);
        }
        if (message.recipient !== 0) {
            obj.recipient = Math.round(message.recipient);
        }
        if (message.sent !== 0n) {
            obj.sent = message.sent.toString();
        }
        if (message.expires !== 0n) {
            obj.expires = message.expires.toString();
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.FriendRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFriendRequest();
        message.id = object.id ?? 0n;
        message.sender = object.sender ?? 0;
        message.recipient = object.recipient ?? 0;
        message.sent = object.sent ?? 0n;
        message.expires = object.expires ?? 0n;
        message.message = object.message ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
