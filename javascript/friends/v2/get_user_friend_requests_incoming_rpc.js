"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: friends/v2/get_user_friend_requests_incoming_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUserFriendRequestsIncomingResponse = exports.GetUserFriendRequestsIncomingRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const friend_request_1 = require("./friend_request");
exports.protobufPackage = "friends.v2";
function createBaseGetUserFriendRequestsIncomingRequest() {
    return { pid: 0 };
}
exports.GetUserFriendRequestsIncomingRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pid !== 0) {
            writer.uint32(8).uint32(message.pid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserFriendRequestsIncomingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.pid !== 0) {
            obj.pid = Math.round(message.pid);
        }
        return obj;
    },
    create(base) {
        return exports.GetUserFriendRequestsIncomingRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserFriendRequestsIncomingRequest();
        message.pid = object.pid ?? 0;
        return message;
    },
};
function createBaseGetUserFriendRequestsIncomingResponse() {
    return { friendRequests: [] };
}
exports.GetUserFriendRequestsIncomingResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.friendRequests) {
            friend_request_1.FriendRequest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserFriendRequestsIncomingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.friendRequests.push(friend_request_1.FriendRequest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            friendRequests: globalThis.Array.isArray(object?.friendRequests)
                ? object.friendRequests.map((e) => friend_request_1.FriendRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.friendRequests?.length) {
            obj.friendRequests = message.friendRequests.map((e) => friend_request_1.FriendRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetUserFriendRequestsIncomingResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserFriendRequestsIncomingResponse();
        message.friendRequests = object.friendRequests?.map((e) => friend_request_1.FriendRequest.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
