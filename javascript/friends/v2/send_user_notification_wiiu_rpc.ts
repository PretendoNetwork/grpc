// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: friends/v2/send_user_notification_wiiu_rpc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "friends.v2";

export interface SendUserNotificationWiiURequest {
  pid: number;
  notificationData: Buffer;
}

export interface SendUserNotificationWiiUResponse {
}

function createBaseSendUserNotificationWiiURequest(): SendUserNotificationWiiURequest {
  return { pid: 0, notificationData: Buffer.alloc(0) };
}

export const SendUserNotificationWiiURequest: MessageFns<SendUserNotificationWiiURequest> = {
  encode(message: SendUserNotificationWiiURequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pid !== 0) {
      writer.uint32(8).uint32(message.pid);
    }
    if (message.notificationData.length !== 0) {
      writer.uint32(18).bytes(message.notificationData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendUserNotificationWiiURequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendUserNotificationWiiURequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pid = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.notificationData = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendUserNotificationWiiURequest {
    return {
      pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
      notificationData: isSet(object.notificationData)
        ? Buffer.from(bytesFromBase64(object.notificationData))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: SendUserNotificationWiiURequest): unknown {
    const obj: any = {};
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    if (message.notificationData.length !== 0) {
      obj.notificationData = base64FromBytes(message.notificationData);
    }
    return obj;
  },

  create(base?: DeepPartial<SendUserNotificationWiiURequest>): SendUserNotificationWiiURequest {
    return SendUserNotificationWiiURequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendUserNotificationWiiURequest>): SendUserNotificationWiiURequest {
    const message = createBaseSendUserNotificationWiiURequest();
    message.pid = object.pid ?? 0;
    message.notificationData = object.notificationData ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseSendUserNotificationWiiUResponse(): SendUserNotificationWiiUResponse {
  return {};
}

export const SendUserNotificationWiiUResponse: MessageFns<SendUserNotificationWiiUResponse> = {
  encode(_: SendUserNotificationWiiUResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendUserNotificationWiiUResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendUserNotificationWiiUResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SendUserNotificationWiiUResponse {
    return {};
  },

  toJSON(_: SendUserNotificationWiiUResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SendUserNotificationWiiUResponse>): SendUserNotificationWiiUResponse {
    return SendUserNotificationWiiUResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SendUserNotificationWiiUResponse>): SendUserNotificationWiiUResponse {
    const message = createBaseSendUserNotificationWiiUResponse();
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
