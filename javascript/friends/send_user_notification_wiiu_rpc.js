"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: friends/send_user_notification_wiiu_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendUserNotificationWiiURequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "friends";
function createBaseSendUserNotificationWiiURequest() {
    return { pid: 0, notificationData: Buffer.alloc(0) };
}
exports.SendUserNotificationWiiURequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pid !== 0) {
            writer.uint32(8).uint32(message.pid);
        }
        if (message.notificationData.length !== 0) {
            writer.uint32(18).bytes(message.notificationData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendUserNotificationWiiURequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.notificationData = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
            notificationData: isSet(object.notificationData)
                ? Buffer.from(bytesFromBase64(object.notificationData))
                : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pid !== 0) {
            obj.pid = Math.round(message.pid);
        }
        if (message.notificationData.length !== 0) {
            obj.notificationData = base64FromBytes(message.notificationData);
        }
        return obj;
    },
    create(base) {
        return exports.SendUserNotificationWiiURequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSendUserNotificationWiiURequest();
        message.pid = object.pid ?? 0;
        message.notificationData = object.notificationData ?? Buffer.alloc(0);
        return message;
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function isSet(value) {
    return value !== null && value !== undefined;
}
