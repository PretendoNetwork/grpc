"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: friends/send_user_friend_request_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendUserFriendRequestResponse = exports.SendUserFriendRequestRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "friends";
function createBaseSendUserFriendRequestRequest() {
    return { sender: 0, recipient: 0, message: "" };
}
exports.SendUserFriendRequestRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== 0) {
            writer.uint32(8).uint32(message.sender);
        }
        if (message.recipient !== 0) {
            writer.uint32(16).uint32(message.recipient);
        }
        if (message.message !== "") {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendUserFriendRequestRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sender = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.recipient = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.Number(object.sender) : 0,
            recipient: isSet(object.recipient) ? globalThis.Number(object.recipient) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== 0) {
            obj.sender = Math.round(message.sender);
        }
        if (message.recipient !== 0) {
            obj.recipient = Math.round(message.recipient);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.SendUserFriendRequestRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSendUserFriendRequestRequest();
        message.sender = object.sender ?? 0;
        message.recipient = object.recipient ?? 0;
        message.message = object.message ?? "";
        return message;
    },
};
function createBaseSendUserFriendRequestResponse() {
    return { success: false };
}
exports.SendUserFriendRequestResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendUserFriendRequestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.SendUserFriendRequestResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSendUserFriendRequestResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
