/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,output_javascript,output_legacy_commonjs,ts_nocheck
// @generated from protobuf file "api/login_rpc.proto" (package "api", syntax proto3)
// tslint:disable
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginResponse = exports.LoginRequest = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("api.LoginRequest", [
            { no: 1, name: "grant_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "refresh_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.grantType = "";
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string grant_type */ 1:
                    message.grantType = reader.string();
                    break;
                case /* optional string username */ 2:
                    message.username = reader.string();
                    break;
                case /* optional string password */ 3:
                    message.password = reader.string();
                    break;
                case /* optional string refresh_token */ 4:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string grant_type = 1; */
        if (message.grantType !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.grantType);
        /* optional string username = 2; */
        if (message.username !== undefined)
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.username);
        /* optional string password = 3; */
        if (message.password !== undefined)
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.password);
        /* optional string refresh_token = 4; */
        if (message.refreshToken !== undefined)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.LoginRequest
 */
exports.LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("api.LoginResponse", [
            { no: 1, name: "expires_in", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "token_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.expiresIn = 0;
        message.tokenType = "";
        message.accessToken = "";
        message.refreshToken = "";
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 expires_in */ 1:
                    message.expiresIn = reader.uint32();
                    break;
                case /* string token_type */ 2:
                    message.tokenType = reader.string();
                    break;
                case /* string access_token */ 3:
                    message.accessToken = reader.string();
                    break;
                case /* string refresh_token */ 4:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 expires_in = 1; */
        if (message.expiresIn !== 0)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.expiresIn);
        /* string token_type = 2; */
        if (message.tokenType !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.tokenType);
        /* string access_token = 3; */
        if (message.accessToken !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.accessToken);
        /* string refresh_token = 4; */
        if (message.refreshToken !== "")
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.LoginResponse
 */
exports.LoginResponse = new LoginResponse$Type();
