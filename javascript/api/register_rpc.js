/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,output_javascript,output_legacy_commonjs,ts_nocheck
// @generated from protobuf file "api/register_rpc.proto" (package "api", syntax proto3)
// tslint:disable
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterRequest = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("api.RegisterRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mii_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "password_confirm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "captcha_response", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.email = "";
        message.username = "";
        message.miiName = "";
        message.password = "";
        message.passwordConfirm = "";
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string mii_name */ 3:
                    message.miiName = reader.string();
                    break;
                case /* string password */ 4:
                    message.password = reader.string();
                    break;
                case /* string password_confirm */ 5:
                    message.passwordConfirm = reader.string();
                    break;
                case /* optional string captcha_response */ 6:
                    message.captchaResponse = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.email);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.username);
        /* string mii_name = 3; */
        if (message.miiName !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.miiName);
        /* string password = 4; */
        if (message.password !== "")
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.password);
        /* string password_confirm = 5; */
        if (message.passwordConfirm !== "")
            writer.tag(5, runtime_1.WireType.LengthDelimited).string(message.passwordConfirm);
        /* optional string captcha_response = 6; */
        if (message.captchaResponse !== undefined)
            writer.tag(6, runtime_1.WireType.LengthDelimited).string(message.captchaResponse);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.RegisterRequest
 */
exports.RegisterRequest = new RegisterRequest$Type();
