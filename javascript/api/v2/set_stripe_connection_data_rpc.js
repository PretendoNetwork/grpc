"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: api/v2/set_stripe_connection_data_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetStripeConnectionDataResponse = exports.SetStripeConnectionDataRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "api.v2";
function createBaseSetStripeConnectionDataRequest() {
    return {
        customerId: undefined,
        subscriptionId: undefined,
        priceId: undefined,
        tierLevel: undefined,
        tierName: undefined,
        timestamp: 0n,
    };
}
exports.SetStripeConnectionDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customerId !== undefined) {
            writer.uint32(10).string(message.customerId);
        }
        if (message.subscriptionId !== undefined) {
            writer.uint32(18).string(message.subscriptionId);
        }
        if (message.priceId !== undefined) {
            writer.uint32(26).string(message.priceId);
        }
        if (message.tierLevel !== undefined) {
            writer.uint32(32).uint32(message.tierLevel);
        }
        if (message.tierName !== undefined) {
            writer.uint32(42).string(message.tierName);
        }
        if (message.timestamp !== 0n) {
            if (BigInt.asUintN(64, message.timestamp) !== message.timestamp) {
                throw new globalThis.Error("value provided for field message.timestamp of type uint64 too large");
            }
            writer.uint32(48).uint64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetStripeConnectionDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.priceId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.tierLevel = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tierName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.timestamp = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : undefined,
            subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : undefined,
            priceId: isSet(object.priceId) ? globalThis.String(object.priceId) : undefined,
            tierLevel: isSet(object.tierLevel) ? globalThis.Number(object.tierLevel) : undefined,
            tierName: isSet(object.tierName) ? globalThis.String(object.tierName) : undefined,
            timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.customerId !== undefined) {
            obj.customerId = message.customerId;
        }
        if (message.subscriptionId !== undefined) {
            obj.subscriptionId = message.subscriptionId;
        }
        if (message.priceId !== undefined) {
            obj.priceId = message.priceId;
        }
        if (message.tierLevel !== undefined) {
            obj.tierLevel = Math.round(message.tierLevel);
        }
        if (message.tierName !== undefined) {
            obj.tierName = message.tierName;
        }
        if (message.timestamp !== 0n) {
            obj.timestamp = message.timestamp.toString();
        }
        return obj;
    },
    create(base) {
        return exports.SetStripeConnectionDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetStripeConnectionDataRequest();
        message.customerId = object.customerId ?? undefined;
        message.subscriptionId = object.subscriptionId ?? undefined;
        message.priceId = object.priceId ?? undefined;
        message.tierLevel = object.tierLevel ?? undefined;
        message.tierName = object.tierName ?? undefined;
        message.timestamp = object.timestamp ?? 0n;
        return message;
    },
};
function createBaseSetStripeConnectionDataResponse() {
    return {};
}
exports.SetStripeConnectionDataResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetStripeConnectionDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetStripeConnectionDataResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetStripeConnectionDataResponse();
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
