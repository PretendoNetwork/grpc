"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: api/v2/user_connections.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserConnections = exports.StripeConnection = exports.DiscordConnection = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "api.v2";
function createBaseDiscordConnection() {
    return { id: "" };
}
exports.DiscordConnection = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDiscordConnection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DiscordConnection.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDiscordConnection();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseStripeConnection() {
    return {
        customerId: undefined,
        subscriptionId: undefined,
        priceId: undefined,
        tierLevel: undefined,
        tierName: undefined,
        latestWebhookTimestamp: 0n,
    };
}
exports.StripeConnection = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customerId !== undefined) {
            writer.uint32(10).string(message.customerId);
        }
        if (message.subscriptionId !== undefined) {
            writer.uint32(18).string(message.subscriptionId);
        }
        if (message.priceId !== undefined) {
            writer.uint32(26).string(message.priceId);
        }
        if (message.tierLevel !== undefined) {
            writer.uint32(32).uint32(message.tierLevel);
        }
        if (message.tierName !== undefined) {
            writer.uint32(42).string(message.tierName);
        }
        if (message.latestWebhookTimestamp !== 0n) {
            if (BigInt.asUintN(64, message.latestWebhookTimestamp) !== message.latestWebhookTimestamp) {
                throw new globalThis.Error("value provided for field message.latestWebhookTimestamp of type uint64 too large");
            }
            writer.uint32(48).uint64(message.latestWebhookTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStripeConnection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.priceId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.tierLevel = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tierName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.latestWebhookTimestamp = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : undefined,
            subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : undefined,
            priceId: isSet(object.priceId) ? globalThis.String(object.priceId) : undefined,
            tierLevel: isSet(object.tierLevel) ? globalThis.Number(object.tierLevel) : undefined,
            tierName: isSet(object.tierName) ? globalThis.String(object.tierName) : undefined,
            latestWebhookTimestamp: isSet(object.latestWebhookTimestamp) ? BigInt(object.latestWebhookTimestamp) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.customerId !== undefined) {
            obj.customerId = message.customerId;
        }
        if (message.subscriptionId !== undefined) {
            obj.subscriptionId = message.subscriptionId;
        }
        if (message.priceId !== undefined) {
            obj.priceId = message.priceId;
        }
        if (message.tierLevel !== undefined) {
            obj.tierLevel = Math.round(message.tierLevel);
        }
        if (message.tierName !== undefined) {
            obj.tierName = message.tierName;
        }
        if (message.latestWebhookTimestamp !== 0n) {
            obj.latestWebhookTimestamp = message.latestWebhookTimestamp.toString();
        }
        return obj;
    },
    create(base) {
        return exports.StripeConnection.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStripeConnection();
        message.customerId = object.customerId ?? undefined;
        message.subscriptionId = object.subscriptionId ?? undefined;
        message.priceId = object.priceId ?? undefined;
        message.tierLevel = object.tierLevel ?? undefined;
        message.tierName = object.tierName ?? undefined;
        message.latestWebhookTimestamp = object.latestWebhookTimestamp ?? 0n;
        return message;
    },
};
function createBaseUserConnections() {
    return { discord: undefined, stripe: undefined };
}
exports.UserConnections = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.discord !== undefined) {
            exports.DiscordConnection.encode(message.discord, writer.uint32(10).fork()).join();
        }
        if (message.stripe !== undefined) {
            exports.StripeConnection.encode(message.stripe, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserConnections();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.discord = exports.DiscordConnection.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.stripe = exports.StripeConnection.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            discord: isSet(object.discord) ? exports.DiscordConnection.fromJSON(object.discord) : undefined,
            stripe: isSet(object.stripe) ? exports.StripeConnection.fromJSON(object.stripe) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.discord !== undefined) {
            obj.discord = exports.DiscordConnection.toJSON(message.discord);
        }
        if (message.stripe !== undefined) {
            obj.stripe = exports.StripeConnection.toJSON(message.stripe);
        }
        return obj;
    },
    create(base) {
        return exports.UserConnections.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserConnections();
        message.discord = (object.discord !== undefined && object.discord !== null)
            ? exports.DiscordConnection.fromPartial(object.discord)
            : undefined;
        message.stripe = (object.stripe !== undefined && object.stripe !== null)
            ? exports.StripeConnection.fromPartial(object.stripe)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
