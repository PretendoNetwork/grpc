// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: api/v2/user_connections.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.v2";

export interface DiscordConnection {
  id: string;
}

export interface StripeConnection {
  customerId?: string | undefined;
  subscriptionId?: string | undefined;
  priceId?: string | undefined;
  tierLevel?: number | undefined;
  tierName?: string | undefined;
  latestWebhookTimestamp: bigint;
}

export interface UserConnections {
  discord: DiscordConnection | undefined;
  stripe: StripeConnection | undefined;
}

function createBaseDiscordConnection(): DiscordConnection {
  return { id: "" };
}

export const DiscordConnection: MessageFns<DiscordConnection> = {
  encode(message: DiscordConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscordConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscordConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscordConnection {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DiscordConnection): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DiscordConnection>): DiscordConnection {
    return DiscordConnection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscordConnection>): DiscordConnection {
    const message = createBaseDiscordConnection();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseStripeConnection(): StripeConnection {
  return {
    customerId: undefined,
    subscriptionId: undefined,
    priceId: undefined,
    tierLevel: undefined,
    tierName: undefined,
    latestWebhookTimestamp: 0n,
  };
}

export const StripeConnection: MessageFns<StripeConnection> = {
  encode(message: StripeConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== undefined) {
      writer.uint32(10).string(message.customerId);
    }
    if (message.subscriptionId !== undefined) {
      writer.uint32(18).string(message.subscriptionId);
    }
    if (message.priceId !== undefined) {
      writer.uint32(26).string(message.priceId);
    }
    if (message.tierLevel !== undefined) {
      writer.uint32(32).uint32(message.tierLevel);
    }
    if (message.tierName !== undefined) {
      writer.uint32(42).string(message.tierName);
    }
    if (message.latestWebhookTimestamp !== 0n) {
      if (BigInt.asUintN(64, message.latestWebhookTimestamp) !== message.latestWebhookTimestamp) {
        throw new globalThis.Error("value provided for field message.latestWebhookTimestamp of type uint64 too large");
      }
      writer.uint32(48).uint64(message.latestWebhookTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StripeConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStripeConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subscriptionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.priceId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.tierLevel = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tierName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.latestWebhookTimestamp = reader.uint64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StripeConnection {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : undefined,
      subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : undefined,
      priceId: isSet(object.priceId) ? globalThis.String(object.priceId) : undefined,
      tierLevel: isSet(object.tierLevel) ? globalThis.Number(object.tierLevel) : undefined,
      tierName: isSet(object.tierName) ? globalThis.String(object.tierName) : undefined,
      latestWebhookTimestamp: isSet(object.latestWebhookTimestamp) ? BigInt(object.latestWebhookTimestamp) : 0n,
    };
  },

  toJSON(message: StripeConnection): unknown {
    const obj: any = {};
    if (message.customerId !== undefined) {
      obj.customerId = message.customerId;
    }
    if (message.subscriptionId !== undefined) {
      obj.subscriptionId = message.subscriptionId;
    }
    if (message.priceId !== undefined) {
      obj.priceId = message.priceId;
    }
    if (message.tierLevel !== undefined) {
      obj.tierLevel = Math.round(message.tierLevel);
    }
    if (message.tierName !== undefined) {
      obj.tierName = message.tierName;
    }
    if (message.latestWebhookTimestamp !== 0n) {
      obj.latestWebhookTimestamp = message.latestWebhookTimestamp.toString();
    }
    return obj;
  },

  create(base?: DeepPartial<StripeConnection>): StripeConnection {
    return StripeConnection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StripeConnection>): StripeConnection {
    const message = createBaseStripeConnection();
    message.customerId = object.customerId ?? undefined;
    message.subscriptionId = object.subscriptionId ?? undefined;
    message.priceId = object.priceId ?? undefined;
    message.tierLevel = object.tierLevel ?? undefined;
    message.tierName = object.tierName ?? undefined;
    message.latestWebhookTimestamp = object.latestWebhookTimestamp ?? 0n;
    return message;
  },
};

function createBaseUserConnections(): UserConnections {
  return { discord: undefined, stripe: undefined };
}

export const UserConnections: MessageFns<UserConnections> = {
  encode(message: UserConnections, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.discord !== undefined) {
      DiscordConnection.encode(message.discord, writer.uint32(10).fork()).join();
    }
    if (message.stripe !== undefined) {
      StripeConnection.encode(message.stripe, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserConnections {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserConnections();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.discord = DiscordConnection.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stripe = StripeConnection.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserConnections {
    return {
      discord: isSet(object.discord) ? DiscordConnection.fromJSON(object.discord) : undefined,
      stripe: isSet(object.stripe) ? StripeConnection.fromJSON(object.stripe) : undefined,
    };
  },

  toJSON(message: UserConnections): unknown {
    const obj: any = {};
    if (message.discord !== undefined) {
      obj.discord = DiscordConnection.toJSON(message.discord);
    }
    if (message.stripe !== undefined) {
      obj.stripe = StripeConnection.toJSON(message.stripe);
    }
    return obj;
  },

  create(base?: DeepPartial<UserConnections>): UserConnections {
    return UserConnections.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserConnections>): UserConnections {
    const message = createBaseUserConnections();
    message.discord = (object.discord !== undefined && object.discord !== null)
      ? DiscordConnection.fromPartial(object.discord)
      : undefined;
    message.stripe = (object.stripe !== undefined && object.stripe !== null)
      ? StripeConnection.fromPartial(object.stripe)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
