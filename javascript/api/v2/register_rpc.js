"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: api/v2/register_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterResponse = exports.RegisterRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "api.v2";
function createBaseRegisterRequest() {
    return { email: "", username: "", miiName: "", password: "", passwordConfirm: "", captchaResponse: undefined };
}
exports.RegisterRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.miiName !== "") {
            writer.uint32(26).string(message.miiName);
        }
        if (message.password !== "") {
            writer.uint32(34).string(message.password);
        }
        if (message.passwordConfirm !== "") {
            writer.uint32(42).string(message.passwordConfirm);
        }
        if (message.captchaResponse !== undefined) {
            writer.uint32(50).string(message.captchaResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.miiName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.passwordConfirm = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.captchaResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            miiName: isSet(object.miiName) ? globalThis.String(object.miiName) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            passwordConfirm: isSet(object.passwordConfirm) ? globalThis.String(object.passwordConfirm) : "",
            captchaResponse: isSet(object.captchaResponse) ? globalThis.String(object.captchaResponse) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.miiName !== "") {
            obj.miiName = message.miiName;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.passwordConfirm !== "") {
            obj.passwordConfirm = message.passwordConfirm;
        }
        if (message.captchaResponse !== undefined) {
            obj.captchaResponse = message.captchaResponse;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRegisterRequest();
        message.email = object.email ?? "";
        message.username = object.username ?? "";
        message.miiName = object.miiName ?? "";
        message.password = object.password ?? "";
        message.passwordConfirm = object.passwordConfirm ?? "";
        message.captchaResponse = object.captchaResponse ?? undefined;
        return message;
    },
};
function createBaseRegisterResponse() {
    return { expiresIn: 0, tokenType: "", accessToken: "", refreshToken: "" };
}
exports.RegisterResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.expiresIn !== 0) {
            writer.uint32(8).uint32(message.expiresIn);
        }
        if (message.tokenType !== "") {
            writer.uint32(18).string(message.tokenType);
        }
        if (message.accessToken !== "") {
            writer.uint32(26).string(message.accessToken);
        }
        if (message.refreshToken !== "") {
            writer.uint32(34).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.expiresIn = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            expiresIn: isSet(object.expiresIn) ? globalThis.Number(object.expiresIn) : 0,
            tokenType: isSet(object.tokenType) ? globalThis.String(object.tokenType) : "",
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.expiresIn !== 0) {
            obj.expiresIn = Math.round(message.expiresIn);
        }
        if (message.tokenType !== "") {
            obj.tokenType = message.tokenType;
        }
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRegisterResponse();
        message.expiresIn = object.expiresIn ?? 0;
        message.tokenType = object.tokenType ?? "";
        message.accessToken = object.accessToken ?? "";
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
