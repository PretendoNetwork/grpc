"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: account/update_pnid_permissions.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdatePNIDPermissionsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const pnid_permission_flags_1 = require("./pnid_permission_flags");
exports.protobufPackage = "account";
function createBaseUpdatePNIDPermissionsRequest() {
    return { pid: 0, permissions: undefined };
}
exports.UpdatePNIDPermissionsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pid !== 0) {
            writer.uint32(8).uint32(message.pid);
        }
        if (message.permissions !== undefined) {
            pnid_permission_flags_1.PNIDPermissionFlags.encode(message.permissions, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePNIDPermissionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.permissions = pnid_permission_flags_1.PNIDPermissionFlags.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
            permissions: isSet(object.permissions) ? pnid_permission_flags_1.PNIDPermissionFlags.fromJSON(object.permissions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pid !== 0) {
            obj.pid = Math.round(message.pid);
        }
        if (message.permissions !== undefined) {
            obj.permissions = pnid_permission_flags_1.PNIDPermissionFlags.toJSON(message.permissions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePNIDPermissionsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePNIDPermissionsRequest();
        message.pid = object.pid ?? 0;
        message.permissions = (object.permissions !== undefined && object.permissions !== null)
            ? pnid_permission_flags_1.PNIDPermissionFlags.fromPartial(object.permissions)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
