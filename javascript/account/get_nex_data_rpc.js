"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: account/get_nex_data_rpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNEXDataResponse = exports.GetNEXDataRequest = exports.DeviceType = exports.protobufPackage = void 0;
exports.deviceTypeFromJSON = deviceTypeFromJSON;
exports.deviceTypeToJSON = deviceTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "account";
var DeviceType;
(function (DeviceType) {
    DeviceType[DeviceType["CTR"] = 0] = "CTR";
    DeviceType[DeviceType["WUP"] = 1] = "WUP";
    DeviceType[DeviceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DeviceType || (exports.DeviceType = DeviceType = {}));
function deviceTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CTR":
            return DeviceType.CTR;
        case 1:
        case "WUP":
            return DeviceType.WUP;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DeviceType.UNRECOGNIZED;
    }
}
function deviceTypeToJSON(object) {
    switch (object) {
        case DeviceType.CTR:
            return "CTR";
        case DeviceType.WUP:
            return "WUP";
        case DeviceType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseGetNEXDataRequest() {
    return { pid: 0 };
}
exports.GetNEXDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pid !== 0) {
            writer.uint32(8).uint32(message.pid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNEXDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.pid !== 0) {
            obj.pid = Math.round(message.pid);
        }
        return obj;
    },
    create(base) {
        return exports.GetNEXDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetNEXDataRequest();
        message.pid = object.pid ?? 0;
        return message;
    },
};
function createBaseGetNEXDataResponse() {
    return { pid: 0, password: "", owningPid: 0, accessLevel: 0, serverAccessLevel: "", friendCode: "", deviceType: 0 };
}
exports.GetNEXDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pid !== 0) {
            writer.uint32(8).uint32(message.pid);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        if (message.owningPid !== 0) {
            writer.uint32(24).uint32(message.owningPid);
        }
        if (message.accessLevel !== 0) {
            writer.uint32(32).int32(message.accessLevel);
        }
        if (message.serverAccessLevel !== "") {
            writer.uint32(42).string(message.serverAccessLevel);
        }
        if (message.friendCode !== "") {
            writer.uint32(50).string(message.friendCode);
        }
        if (message.deviceType !== 0) {
            writer.uint32(56).int32(message.deviceType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNEXDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.owningPid = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.accessLevel = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.serverAccessLevel = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.friendCode = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.deviceType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            owningPid: isSet(object.owningPid) ? globalThis.Number(object.owningPid) : 0,
            accessLevel: isSet(object.accessLevel) ? globalThis.Number(object.accessLevel) : 0,
            serverAccessLevel: isSet(object.serverAccessLevel) ? globalThis.String(object.serverAccessLevel) : "",
            friendCode: isSet(object.friendCode) ? globalThis.String(object.friendCode) : "",
            deviceType: isSet(object.deviceType) ? deviceTypeFromJSON(object.deviceType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pid !== 0) {
            obj.pid = Math.round(message.pid);
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.owningPid !== 0) {
            obj.owningPid = Math.round(message.owningPid);
        }
        if (message.accessLevel !== 0) {
            obj.accessLevel = Math.round(message.accessLevel);
        }
        if (message.serverAccessLevel !== "") {
            obj.serverAccessLevel = message.serverAccessLevel;
        }
        if (message.friendCode !== "") {
            obj.friendCode = message.friendCode;
        }
        if (message.deviceType !== 0) {
            obj.deviceType = deviceTypeToJSON(message.deviceType);
        }
        return obj;
    },
    create(base) {
        return exports.GetNEXDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetNEXDataResponse();
        message.pid = object.pid ?? 0;
        message.password = object.password ?? "";
        message.owningPid = object.owningPid ?? 0;
        message.accessLevel = object.accessLevel ?? 0;
        message.serverAccessLevel = object.serverAccessLevel ?? "";
        message.friendCode = object.friendCode ?? "";
        message.deviceType = object.deviceType ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
