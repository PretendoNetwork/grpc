// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: account/v2/device.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "account.v2";

export interface Device {
  model: string;
  serial: string;
  linkedPids: number[];
  accessLevel: number;
  serverAccessLevel: string;
}

function createBaseDevice(): Device {
  return { model: "", serial: "", linkedPids: [], accessLevel: 0, serverAccessLevel: "" };
}

export const Device: MessageFns<Device> = {
  encode(message: Device, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.serial !== "") {
      writer.uint32(18).string(message.serial);
    }
    writer.uint32(26).fork();
    for (const v of message.linkedPids) {
      writer.uint32(v);
    }
    writer.join();
    if (message.accessLevel !== 0) {
      writer.uint32(32).int32(message.accessLevel);
    }
    if (message.serverAccessLevel !== "") {
      writer.uint32(42).string(message.serverAccessLevel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Device {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serial = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.linkedPids.push(reader.uint32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.linkedPids.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.accessLevel = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.serverAccessLevel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Device {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      serial: isSet(object.serial) ? globalThis.String(object.serial) : "",
      linkedPids: globalThis.Array.isArray(object?.linkedPids)
        ? object.linkedPids.map((e: any) => globalThis.Number(e))
        : [],
      accessLevel: isSet(object.accessLevel) ? globalThis.Number(object.accessLevel) : 0,
      serverAccessLevel: isSet(object.serverAccessLevel) ? globalThis.String(object.serverAccessLevel) : "",
    };
  },

  toJSON(message: Device): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.serial !== "") {
      obj.serial = message.serial;
    }
    if (message.linkedPids?.length) {
      obj.linkedPids = message.linkedPids.map((e) => Math.round(e));
    }
    if (message.accessLevel !== 0) {
      obj.accessLevel = Math.round(message.accessLevel);
    }
    if (message.serverAccessLevel !== "") {
      obj.serverAccessLevel = message.serverAccessLevel;
    }
    return obj;
  },

  create(base?: DeepPartial<Device>): Device {
    return Device.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Device>): Device {
    const message = createBaseDevice();
    message.model = object.model ?? "";
    message.serial = object.serial ?? "";
    message.linkedPids = object.linkedPids?.map((e) => e) || [];
    message.accessLevel = object.accessLevel ?? 0;
    message.serverAccessLevel = object.serverAccessLevel ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
