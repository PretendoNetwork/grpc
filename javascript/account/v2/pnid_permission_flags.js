/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,output_javascript,output_legacy_commonjs,ts_nocheck
// @generated from protobuf file "account/v2/pnid_permission_flags.proto" (package "account.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PNIDPermissionFlags = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class PNIDPermissionFlags$Type extends runtime_4.MessageType {
    constructor() {
        super("account.v2.PNIDPermissionFlags", [
            { no: 1, name: "banned_all_permanently", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "banned_all_temporarily", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "beta_access", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "access_admin_panel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "create_server_configs", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "modify_server_configs", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "deploy_server", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "modify_pnids", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "modify_nex_accounts", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "modify_consoles", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "ban_pnids", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "ban_nex_accounts", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "ban_consoles", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "moderate_miiverse", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "create_api_keys", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "create_boss_tasks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "update_boss_tasks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "delete_boss_tasks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "upload_boss_files", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "update_boss_files", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "delete_boss_files", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "update_pnid_permissions", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.bannedAllPermanently = false;
        message.bannedAllTemporarily = false;
        message.betaAccess = false;
        message.accessAdminPanel = false;
        message.createServerConfigs = false;
        message.modifyServerConfigs = false;
        message.deployServer = false;
        message.modifyPnids = false;
        message.modifyNexAccounts = false;
        message.modifyConsoles = false;
        message.banPnids = false;
        message.banNexAccounts = false;
        message.banConsoles = false;
        message.moderateMiiverse = false;
        message.createApiKeys = false;
        message.createBossTasks = false;
        message.updateBossTasks = false;
        message.deleteBossTasks = false;
        message.uploadBossFiles = false;
        message.updateBossFiles = false;
        message.deleteBossFiles = false;
        message.updatePnidPermissions = false;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool banned_all_permanently */ 1:
                    message.bannedAllPermanently = reader.bool();
                    break;
                case /* bool banned_all_temporarily */ 2:
                    message.bannedAllTemporarily = reader.bool();
                    break;
                case /* bool beta_access */ 3:
                    message.betaAccess = reader.bool();
                    break;
                case /* bool access_admin_panel */ 4:
                    message.accessAdminPanel = reader.bool();
                    break;
                case /* bool create_server_configs */ 5:
                    message.createServerConfigs = reader.bool();
                    break;
                case /* bool modify_server_configs */ 6:
                    message.modifyServerConfigs = reader.bool();
                    break;
                case /* bool deploy_server */ 7:
                    message.deployServer = reader.bool();
                    break;
                case /* bool modify_pnids */ 8:
                    message.modifyPnids = reader.bool();
                    break;
                case /* bool modify_nex_accounts */ 9:
                    message.modifyNexAccounts = reader.bool();
                    break;
                case /* bool modify_consoles */ 10:
                    message.modifyConsoles = reader.bool();
                    break;
                case /* bool ban_pnids */ 11:
                    message.banPnids = reader.bool();
                    break;
                case /* bool ban_nex_accounts */ 12:
                    message.banNexAccounts = reader.bool();
                    break;
                case /* bool ban_consoles */ 13:
                    message.banConsoles = reader.bool();
                    break;
                case /* bool moderate_miiverse */ 14:
                    message.moderateMiiverse = reader.bool();
                    break;
                case /* bool create_api_keys */ 15:
                    message.createApiKeys = reader.bool();
                    break;
                case /* bool create_boss_tasks */ 16:
                    message.createBossTasks = reader.bool();
                    break;
                case /* bool update_boss_tasks */ 17:
                    message.updateBossTasks = reader.bool();
                    break;
                case /* bool delete_boss_tasks */ 18:
                    message.deleteBossTasks = reader.bool();
                    break;
                case /* bool upload_boss_files */ 19:
                    message.uploadBossFiles = reader.bool();
                    break;
                case /* bool update_boss_files */ 20:
                    message.updateBossFiles = reader.bool();
                    break;
                case /* bool delete_boss_files */ 21:
                    message.deleteBossFiles = reader.bool();
                    break;
                case /* bool update_pnid_permissions */ 22:
                    message.updatePnidPermissions = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool banned_all_permanently = 1; */
        if (message.bannedAllPermanently !== false)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.bannedAllPermanently);
        /* bool banned_all_temporarily = 2; */
        if (message.bannedAllTemporarily !== false)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.bannedAllTemporarily);
        /* bool beta_access = 3; */
        if (message.betaAccess !== false)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.betaAccess);
        /* bool access_admin_panel = 4; */
        if (message.accessAdminPanel !== false)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.accessAdminPanel);
        /* bool create_server_configs = 5; */
        if (message.createServerConfigs !== false)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.createServerConfigs);
        /* bool modify_server_configs = 6; */
        if (message.modifyServerConfigs !== false)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.modifyServerConfigs);
        /* bool deploy_server = 7; */
        if (message.deployServer !== false)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.deployServer);
        /* bool modify_pnids = 8; */
        if (message.modifyPnids !== false)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.modifyPnids);
        /* bool modify_nex_accounts = 9; */
        if (message.modifyNexAccounts !== false)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.modifyNexAccounts);
        /* bool modify_consoles = 10; */
        if (message.modifyConsoles !== false)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.modifyConsoles);
        /* bool ban_pnids = 11; */
        if (message.banPnids !== false)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.banPnids);
        /* bool ban_nex_accounts = 12; */
        if (message.banNexAccounts !== false)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.banNexAccounts);
        /* bool ban_consoles = 13; */
        if (message.banConsoles !== false)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.banConsoles);
        /* bool moderate_miiverse = 14; */
        if (message.moderateMiiverse !== false)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.moderateMiiverse);
        /* bool create_api_keys = 15; */
        if (message.createApiKeys !== false)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.createApiKeys);
        /* bool create_boss_tasks = 16; */
        if (message.createBossTasks !== false)
            writer.tag(16, runtime_1.WireType.Varint).bool(message.createBossTasks);
        /* bool update_boss_tasks = 17; */
        if (message.updateBossTasks !== false)
            writer.tag(17, runtime_1.WireType.Varint).bool(message.updateBossTasks);
        /* bool delete_boss_tasks = 18; */
        if (message.deleteBossTasks !== false)
            writer.tag(18, runtime_1.WireType.Varint).bool(message.deleteBossTasks);
        /* bool upload_boss_files = 19; */
        if (message.uploadBossFiles !== false)
            writer.tag(19, runtime_1.WireType.Varint).bool(message.uploadBossFiles);
        /* bool update_boss_files = 20; */
        if (message.updateBossFiles !== false)
            writer.tag(20, runtime_1.WireType.Varint).bool(message.updateBossFiles);
        /* bool delete_boss_files = 21; */
        if (message.deleteBossFiles !== false)
            writer.tag(21, runtime_1.WireType.Varint).bool(message.deleteBossFiles);
        /* bool update_pnid_permissions = 22; */
        if (message.updatePnidPermissions !== false)
            writer.tag(22, runtime_1.WireType.Varint).bool(message.updatePnidPermissions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message account.v2.PNIDPermissionFlags
 */
exports.PNIDPermissionFlags = new PNIDPermissionFlags$Type();
