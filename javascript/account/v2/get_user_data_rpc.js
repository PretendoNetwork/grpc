/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,output_javascript,output_legacy_commonjs,ts_nocheck
// @generated from protobuf file "account/v2/get_user_data_rpc.proto" (package "account.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUserDataResponse = exports.GetUserDataRequest = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const pnid_permission_flags_1 = require("./pnid_permission_flags");
const mii_1 = require("./mii");
// @generated message type with reflection information, may provide speed optimized methods
class GetUserDataRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("account.v2.GetUserDataRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pid = 0;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 pid */ 1:
                    message.pid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message account.v2.GetUserDataRequest
 */
exports.GetUserDataRequest = new GetUserDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserDataResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("account.v2.GetUserDataResponse", [
            { no: 1, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "access_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "server_access_level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "mii", kind: "message", T: () => mii_1.Mii },
            { no: 7, name: "creation_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "birthdate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "gender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "email_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "tier_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "permissions", kind: "message", T: () => pnid_permission_flags_1.PNIDPermissionFlags }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.deleted = false;
        message.pid = 0;
        message.username = "";
        message.accessLevel = 0;
        message.serverAccessLevel = "";
        message.creationDate = "";
        message.birthdate = "";
        message.gender = "";
        message.country = "";
        message.language = "";
        message.emailAddress = "";
        message.tierName = "";
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool deleted */ 1:
                    message.deleted = reader.bool();
                    break;
                case /* uint32 pid */ 2:
                    message.pid = reader.uint32();
                    break;
                case /* string username */ 3:
                    message.username = reader.string();
                    break;
                case /* int32 access_level */ 4:
                    message.accessLevel = reader.int32();
                    break;
                case /* string server_access_level */ 5:
                    message.serverAccessLevel = reader.string();
                    break;
                case /* account.v2.Mii mii */ 6:
                    message.mii = mii_1.Mii.internalBinaryRead(reader, reader.uint32(), options, message.mii);
                    break;
                case /* string creation_date */ 7:
                    message.creationDate = reader.string();
                    break;
                case /* string birthdate */ 8:
                    message.birthdate = reader.string();
                    break;
                case /* string gender */ 9:
                    message.gender = reader.string();
                    break;
                case /* string country */ 10:
                    message.country = reader.string();
                    break;
                case /* string language */ 11:
                    message.language = reader.string();
                    break;
                case /* string email_address */ 12:
                    message.emailAddress = reader.string();
                    break;
                case /* string tier_name */ 13:
                    message.tierName = reader.string();
                    break;
                case /* account.v2.PNIDPermissionFlags permissions */ 14:
                    message.permissions = pnid_permission_flags_1.PNIDPermissionFlags.internalBinaryRead(reader, reader.uint32(), options, message.permissions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool deleted = 1; */
        if (message.deleted !== false)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.deleted);
        /* uint32 pid = 2; */
        if (message.pid !== 0)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.pid);
        /* string username = 3; */
        if (message.username !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.username);
        /* int32 access_level = 4; */
        if (message.accessLevel !== 0)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.accessLevel);
        /* string server_access_level = 5; */
        if (message.serverAccessLevel !== "")
            writer.tag(5, runtime_1.WireType.LengthDelimited).string(message.serverAccessLevel);
        /* account.v2.Mii mii = 6; */
        if (message.mii)
            mii_1.Mii.internalBinaryWrite(message.mii, writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* string creation_date = 7; */
        if (message.creationDate !== "")
            writer.tag(7, runtime_1.WireType.LengthDelimited).string(message.creationDate);
        /* string birthdate = 8; */
        if (message.birthdate !== "")
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.birthdate);
        /* string gender = 9; */
        if (message.gender !== "")
            writer.tag(9, runtime_1.WireType.LengthDelimited).string(message.gender);
        /* string country = 10; */
        if (message.country !== "")
            writer.tag(10, runtime_1.WireType.LengthDelimited).string(message.country);
        /* string language = 11; */
        if (message.language !== "")
            writer.tag(11, runtime_1.WireType.LengthDelimited).string(message.language);
        /* string email_address = 12; */
        if (message.emailAddress !== "")
            writer.tag(12, runtime_1.WireType.LengthDelimited).string(message.emailAddress);
        /* string tier_name = 13; */
        if (message.tierName !== "")
            writer.tag(13, runtime_1.WireType.LengthDelimited).string(message.tierName);
        /* account.v2.PNIDPermissionFlags permissions = 14; */
        if (message.permissions)
            pnid_permission_flags_1.PNIDPermissionFlags.internalBinaryWrite(message.permissions, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message account.v2.GetUserDataResponse
 */
exports.GetUserDataResponse = new GetUserDataResponse$Type();
