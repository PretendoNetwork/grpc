"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: account/v2/device.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "account.v2";
function createBaseDevice() {
    return { model: "", serial: "", linkedPids: [], accessLevel: 0, serverAccessLevel: "" };
}
exports.Device = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.model !== "") {
            writer.uint32(10).string(message.model);
        }
        if (message.serial !== "") {
            writer.uint32(18).string(message.serial);
        }
        writer.uint32(26).fork();
        for (const v of message.linkedPids) {
            writer.uint32(v);
        }
        writer.join();
        if (message.accessLevel !== 0) {
            writer.uint32(32).int32(message.accessLevel);
        }
        if (message.serverAccessLevel !== "") {
            writer.uint32(42).string(message.serverAccessLevel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.model = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.serial = reader.string();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.linkedPids.push(reader.uint32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.linkedPids.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.accessLevel = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.serverAccessLevel = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            model: isSet(object.model) ? globalThis.String(object.model) : "",
            serial: isSet(object.serial) ? globalThis.String(object.serial) : "",
            linkedPids: globalThis.Array.isArray(object?.linkedPids)
                ? object.linkedPids.map((e) => globalThis.Number(e))
                : [],
            accessLevel: isSet(object.accessLevel) ? globalThis.Number(object.accessLevel) : 0,
            serverAccessLevel: isSet(object.serverAccessLevel) ? globalThis.String(object.serverAccessLevel) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.model !== "") {
            obj.model = message.model;
        }
        if (message.serial !== "") {
            obj.serial = message.serial;
        }
        if (message.linkedPids?.length) {
            obj.linkedPids = message.linkedPids.map((e) => Math.round(e));
        }
        if (message.accessLevel !== 0) {
            obj.accessLevel = Math.round(message.accessLevel);
        }
        if (message.serverAccessLevel !== "") {
            obj.serverAccessLevel = message.serverAccessLevel;
        }
        return obj;
    },
    create(base) {
        return exports.Device.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevice();
        message.model = object.model ?? "";
        message.serial = object.serial ?? "";
        message.linkedPids = object.linkedPids?.map((e) => e) || [];
        message.accessLevel = object.accessLevel ?? 0;
        message.serverAccessLevel = object.serverAccessLevel ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
