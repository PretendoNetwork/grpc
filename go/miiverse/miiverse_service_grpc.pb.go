// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: miiverse/miiverse_service.proto

package miiverse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Miiverse_SMMRequestPostId_FullMethodName = "/miiverse.Miiverse/SMMRequestPostId"
)

// MiiverseClient is the client API for Miiverse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiiverseClient interface {
	// Used by Super Mario Maker
	SMMRequestPostId(ctx context.Context, in *SMMRequestPostIDRequest, opts ...grpc.CallOption) (*SMMRequestPostIDResponse, error)
}

type miiverseClient struct {
	cc grpc.ClientConnInterface
}

func NewMiiverseClient(cc grpc.ClientConnInterface) MiiverseClient {
	return &miiverseClient{cc}
}

func (c *miiverseClient) SMMRequestPostId(ctx context.Context, in *SMMRequestPostIDRequest, opts ...grpc.CallOption) (*SMMRequestPostIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMMRequestPostIDResponse)
	err := c.cc.Invoke(ctx, Miiverse_SMMRequestPostId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiiverseServer is the server API for Miiverse service.
// All implementations must embed UnimplementedMiiverseServer
// for forward compatibility.
type MiiverseServer interface {
	// Used by Super Mario Maker
	SMMRequestPostId(context.Context, *SMMRequestPostIDRequest) (*SMMRequestPostIDResponse, error)
	mustEmbedUnimplementedMiiverseServer()
}

// UnimplementedMiiverseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMiiverseServer struct{}

func (UnimplementedMiiverseServer) SMMRequestPostId(context.Context, *SMMRequestPostIDRequest) (*SMMRequestPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMMRequestPostId not implemented")
}
func (UnimplementedMiiverseServer) mustEmbedUnimplementedMiiverseServer() {}
func (UnimplementedMiiverseServer) testEmbeddedByValue()                  {}

// UnsafeMiiverseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiiverseServer will
// result in compilation errors.
type UnsafeMiiverseServer interface {
	mustEmbedUnimplementedMiiverseServer()
}

func RegisterMiiverseServer(s grpc.ServiceRegistrar, srv MiiverseServer) {
	// If the following call pancis, it indicates UnimplementedMiiverseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Miiverse_ServiceDesc, srv)
}

func _Miiverse_SMMRequestPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMMRequestPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiiverseServer).SMMRequestPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Miiverse_SMMRequestPostId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiiverseServer).SMMRequestPostId(ctx, req.(*SMMRequestPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Miiverse_ServiceDesc is the grpc.ServiceDesc for Miiverse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Miiverse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miiverse.Miiverse",
	HandlerType: (*MiiverseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SMMRequestPostId",
			Handler:    _Miiverse_SMMRequestPostId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miiverse/miiverse_service.proto",
}
