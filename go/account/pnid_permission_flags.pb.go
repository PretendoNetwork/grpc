// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: account/pnid_permission_flags.proto

package account

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PNIDPermissionFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannedAllPermanently  bool `protobuf:"varint,1,opt,name=banned_all_permanently,json=bannedAllPermanently,proto3" json:"banned_all_permanently,omitempty"`
	BannedAllTemporarily  bool `protobuf:"varint,2,opt,name=banned_all_temporarily,json=bannedAllTemporarily,proto3" json:"banned_all_temporarily,omitempty"`
	BetaAccess            bool `protobuf:"varint,3,opt,name=beta_access,json=betaAccess,proto3" json:"beta_access,omitempty"`
	AccessAdminPanel      bool `protobuf:"varint,4,opt,name=access_admin_panel,json=accessAdminPanel,proto3" json:"access_admin_panel,omitempty"`
	CreateServerConfigs   bool `protobuf:"varint,5,opt,name=create_server_configs,json=createServerConfigs,proto3" json:"create_server_configs,omitempty"`
	ModifyServerConfigs   bool `protobuf:"varint,6,opt,name=modify_server_configs,json=modifyServerConfigs,proto3" json:"modify_server_configs,omitempty"`
	DeployServer          bool `protobuf:"varint,7,opt,name=deploy_server,json=deployServer,proto3" json:"deploy_server,omitempty"`
	ModifyPnids           bool `protobuf:"varint,8,opt,name=modify_pnids,json=modifyPnids,proto3" json:"modify_pnids,omitempty"`
	ModifyNexAccounts     bool `protobuf:"varint,9,opt,name=modify_nex_accounts,json=modifyNexAccounts,proto3" json:"modify_nex_accounts,omitempty"`
	ModifyConsoles        bool `protobuf:"varint,10,opt,name=modify_consoles,json=modifyConsoles,proto3" json:"modify_consoles,omitempty"`
	BanPnids              bool `protobuf:"varint,11,opt,name=ban_pnids,json=banPnids,proto3" json:"ban_pnids,omitempty"`
	BanNexAccounts        bool `protobuf:"varint,12,opt,name=ban_nex_accounts,json=banNexAccounts,proto3" json:"ban_nex_accounts,omitempty"`
	BanConsoles           bool `protobuf:"varint,13,opt,name=ban_consoles,json=banConsoles,proto3" json:"ban_consoles,omitempty"`
	ModerateMiiverse      bool `protobuf:"varint,14,opt,name=moderate_miiverse,json=moderateMiiverse,proto3" json:"moderate_miiverse,omitempty"`
	CreateApiKeys         bool `protobuf:"varint,15,opt,name=create_api_keys,json=createApiKeys,proto3" json:"create_api_keys,omitempty"`
	CreateBossTasks       bool `protobuf:"varint,16,opt,name=create_boss_tasks,json=createBossTasks,proto3" json:"create_boss_tasks,omitempty"`
	UpdateBossTasks       bool `protobuf:"varint,17,opt,name=update_boss_tasks,json=updateBossTasks,proto3" json:"update_boss_tasks,omitempty"`
	DeleteBossTasks       bool `protobuf:"varint,18,opt,name=delete_boss_tasks,json=deleteBossTasks,proto3" json:"delete_boss_tasks,omitempty"`
	UploadBossFiles       bool `protobuf:"varint,19,opt,name=upload_boss_files,json=uploadBossFiles,proto3" json:"upload_boss_files,omitempty"`
	UpdateBossFiles       bool `protobuf:"varint,20,opt,name=update_boss_files,json=updateBossFiles,proto3" json:"update_boss_files,omitempty"`
	DeleteBossFiles       bool `protobuf:"varint,21,opt,name=delete_boss_files,json=deleteBossFiles,proto3" json:"delete_boss_files,omitempty"`
	UpdatePnidPermissions bool `protobuf:"varint,22,opt,name=update_pnid_permissions,json=updatePnidPermissions,proto3" json:"update_pnid_permissions,omitempty"`
}

func (x *PNIDPermissionFlags) Reset() {
	*x = PNIDPermissionFlags{}
	mi := &file_account_pnid_permission_flags_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PNIDPermissionFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNIDPermissionFlags) ProtoMessage() {}

func (x *PNIDPermissionFlags) ProtoReflect() protoreflect.Message {
	mi := &file_account_pnid_permission_flags_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNIDPermissionFlags.ProtoReflect.Descriptor instead.
func (*PNIDPermissionFlags) Descriptor() ([]byte, []int) {
	return file_account_pnid_permission_flags_proto_rawDescGZIP(), []int{0}
}

func (x *PNIDPermissionFlags) GetBannedAllPermanently() bool {
	if x != nil {
		return x.BannedAllPermanently
	}
	return false
}

func (x *PNIDPermissionFlags) GetBannedAllTemporarily() bool {
	if x != nil {
		return x.BannedAllTemporarily
	}
	return false
}

func (x *PNIDPermissionFlags) GetBetaAccess() bool {
	if x != nil {
		return x.BetaAccess
	}
	return false
}

func (x *PNIDPermissionFlags) GetAccessAdminPanel() bool {
	if x != nil {
		return x.AccessAdminPanel
	}
	return false
}

func (x *PNIDPermissionFlags) GetCreateServerConfigs() bool {
	if x != nil {
		return x.CreateServerConfigs
	}
	return false
}

func (x *PNIDPermissionFlags) GetModifyServerConfigs() bool {
	if x != nil {
		return x.ModifyServerConfigs
	}
	return false
}

func (x *PNIDPermissionFlags) GetDeployServer() bool {
	if x != nil {
		return x.DeployServer
	}
	return false
}

func (x *PNIDPermissionFlags) GetModifyPnids() bool {
	if x != nil {
		return x.ModifyPnids
	}
	return false
}

func (x *PNIDPermissionFlags) GetModifyNexAccounts() bool {
	if x != nil {
		return x.ModifyNexAccounts
	}
	return false
}

func (x *PNIDPermissionFlags) GetModifyConsoles() bool {
	if x != nil {
		return x.ModifyConsoles
	}
	return false
}

func (x *PNIDPermissionFlags) GetBanPnids() bool {
	if x != nil {
		return x.BanPnids
	}
	return false
}

func (x *PNIDPermissionFlags) GetBanNexAccounts() bool {
	if x != nil {
		return x.BanNexAccounts
	}
	return false
}

func (x *PNIDPermissionFlags) GetBanConsoles() bool {
	if x != nil {
		return x.BanConsoles
	}
	return false
}

func (x *PNIDPermissionFlags) GetModerateMiiverse() bool {
	if x != nil {
		return x.ModerateMiiverse
	}
	return false
}

func (x *PNIDPermissionFlags) GetCreateApiKeys() bool {
	if x != nil {
		return x.CreateApiKeys
	}
	return false
}

func (x *PNIDPermissionFlags) GetCreateBossTasks() bool {
	if x != nil {
		return x.CreateBossTasks
	}
	return false
}

func (x *PNIDPermissionFlags) GetUpdateBossTasks() bool {
	if x != nil {
		return x.UpdateBossTasks
	}
	return false
}

func (x *PNIDPermissionFlags) GetDeleteBossTasks() bool {
	if x != nil {
		return x.DeleteBossTasks
	}
	return false
}

func (x *PNIDPermissionFlags) GetUploadBossFiles() bool {
	if x != nil {
		return x.UploadBossFiles
	}
	return false
}

func (x *PNIDPermissionFlags) GetUpdateBossFiles() bool {
	if x != nil {
		return x.UpdateBossFiles
	}
	return false
}

func (x *PNIDPermissionFlags) GetDeleteBossFiles() bool {
	if x != nil {
		return x.DeleteBossFiles
	}
	return false
}

func (x *PNIDPermissionFlags) GetUpdatePnidPermissions() bool {
	if x != nil {
		return x.UpdatePnidPermissions
	}
	return false
}

var File_account_pnid_permission_flags_proto protoreflect.FileDescriptor

var file_account_pnid_permission_flags_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x6e, 0x69, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8,
	0x07, 0x0a, 0x13, 0x50, 0x4e, 0x49, 0x44, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x6c,
	0x6c, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69,
	0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x6e, 0x69, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6e, 0x69, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x78, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x5f, 0x70, 0x6e, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x61, 0x6e, 0x50, 0x6e, 0x69, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x5f, 0x6e,
	0x65, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x4e, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x69, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x73, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x73, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6e, 0x69, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6e, 0x69, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x8f, 0x01, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x50, 0x6e, 0x69, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x64, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0xca, 0x02, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xe2, 0x02, 0x13, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_account_pnid_permission_flags_proto_rawDescOnce sync.Once
	file_account_pnid_permission_flags_proto_rawDescData = file_account_pnid_permission_flags_proto_rawDesc
)

func file_account_pnid_permission_flags_proto_rawDescGZIP() []byte {
	file_account_pnid_permission_flags_proto_rawDescOnce.Do(func() {
		file_account_pnid_permission_flags_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_pnid_permission_flags_proto_rawDescData)
	})
	return file_account_pnid_permission_flags_proto_rawDescData
}

var file_account_pnid_permission_flags_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_account_pnid_permission_flags_proto_goTypes = []any{
	(*PNIDPermissionFlags)(nil), // 0: account.PNIDPermissionFlags
}
var file_account_pnid_permission_flags_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_account_pnid_permission_flags_proto_init() }
func file_account_pnid_permission_flags_proto_init() {
	if File_account_pnid_permission_flags_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_pnid_permission_flags_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_pnid_permission_flags_proto_goTypes,
		DependencyIndexes: file_account_pnid_permission_flags_proto_depIdxs,
		MessageInfos:      file_account_pnid_permission_flags_proto_msgTypes,
	}.Build()
	File_account_pnid_permission_flags_proto = out.File
	file_account_pnid_permission_flags_proto_rawDesc = nil
	file_account_pnid_permission_flags_proto_goTypes = nil
	file_account_pnid_permission_flags_proto_depIdxs = nil
}
