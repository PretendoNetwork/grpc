// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: boss/v2/boss_service.proto

package bossv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BossService_ListKnownBOSSApps_FullMethodName     = "/boss.v2.BossService/ListKnownBOSSApps"
	BossService_ListTasks_FullMethodName             = "/boss.v2.BossService/ListTasks"
	BossService_RegisterTask_FullMethodName          = "/boss.v2.BossService/RegisterTask"
	BossService_UpdateTask_FullMethodName            = "/boss.v2.BossService/UpdateTask"
	BossService_DeleteTask_FullMethodName            = "/boss.v2.BossService/DeleteTask"
	BossService_DeleteFile_FullMethodName            = "/boss.v2.BossService/DeleteFile"
	BossService_ListFilesWUP_FullMethodName          = "/boss.v2.BossService/ListFilesWUP"
	BossService_UploadFileWUP_FullMethodName         = "/boss.v2.BossService/UploadFileWUP"
	BossService_UpdateFileMetadataWUP_FullMethodName = "/boss.v2.BossService/UpdateFileMetadataWUP"
	BossService_ListFilesCTR_FullMethodName          = "/boss.v2.BossService/ListFilesCTR"
	BossService_UploadFileCTR_FullMethodName         = "/boss.v2.BossService/UploadFileCTR"
	BossService_UpdateFileMetadataCTR_FullMethodName = "/boss.v2.BossService/UpdateFileMetadataCTR"
)

// BossServiceClient is the client API for BossService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BossServiceClient interface {
	ListKnownBOSSApps(ctx context.Context, in *ListKnownBOSSAppsRequest, opts ...grpc.CallOption) (*ListKnownBOSSAppsResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*RegisterTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	ListFilesWUP(ctx context.Context, in *ListFilesWUPRequest, opts ...grpc.CallOption) (*ListFilesWUPResponse, error)
	UploadFileWUP(ctx context.Context, in *UploadFileWUPRequest, opts ...grpc.CallOption) (*UploadFileWUPResponse, error)
	UpdateFileMetadataWUP(ctx context.Context, in *UpdateFileMetadataWUPRequest, opts ...grpc.CallOption) (*UpdateFileMetadataWUPResponse, error)
	ListFilesCTR(ctx context.Context, in *ListFilesCTRRequest, opts ...grpc.CallOption) (*ListFilesCTRResponse, error)
	UploadFileCTR(ctx context.Context, in *UploadFileCTRRequest, opts ...grpc.CallOption) (*UploadFileCTRResponse, error)
	UpdateFileMetadataCTR(ctx context.Context, in *UpdateFileMetadataCTRRequest, opts ...grpc.CallOption) (*UpdateFileMetadataCTRResponse, error)
}

type bossServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBossServiceClient(cc grpc.ClientConnInterface) BossServiceClient {
	return &bossServiceClient{cc}
}

func (c *bossServiceClient) ListKnownBOSSApps(ctx context.Context, in *ListKnownBOSSAppsRequest, opts ...grpc.CallOption) (*ListKnownBOSSAppsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKnownBOSSAppsResponse)
	err := c.cc.Invoke(ctx, BossService_ListKnownBOSSApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, BossService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*RegisterTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTaskResponse)
	err := c.cc.Invoke(ctx, BossService_RegisterTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, BossService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, BossService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, BossService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) ListFilesWUP(ctx context.Context, in *ListFilesWUPRequest, opts ...grpc.CallOption) (*ListFilesWUPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesWUPResponse)
	err := c.cc.Invoke(ctx, BossService_ListFilesWUP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) UploadFileWUP(ctx context.Context, in *UploadFileWUPRequest, opts ...grpc.CallOption) (*UploadFileWUPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileWUPResponse)
	err := c.cc.Invoke(ctx, BossService_UploadFileWUP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) UpdateFileMetadataWUP(ctx context.Context, in *UpdateFileMetadataWUPRequest, opts ...grpc.CallOption) (*UpdateFileMetadataWUPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFileMetadataWUPResponse)
	err := c.cc.Invoke(ctx, BossService_UpdateFileMetadataWUP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) ListFilesCTR(ctx context.Context, in *ListFilesCTRRequest, opts ...grpc.CallOption) (*ListFilesCTRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesCTRResponse)
	err := c.cc.Invoke(ctx, BossService_ListFilesCTR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) UploadFileCTR(ctx context.Context, in *UploadFileCTRRequest, opts ...grpc.CallOption) (*UploadFileCTRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileCTRResponse)
	err := c.cc.Invoke(ctx, BossService_UploadFileCTR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossServiceClient) UpdateFileMetadataCTR(ctx context.Context, in *UpdateFileMetadataCTRRequest, opts ...grpc.CallOption) (*UpdateFileMetadataCTRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFileMetadataCTRResponse)
	err := c.cc.Invoke(ctx, BossService_UpdateFileMetadataCTR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BossServiceServer is the server API for BossService service.
// All implementations must embed UnimplementedBossServiceServer
// for forward compatibility.
type BossServiceServer interface {
	ListKnownBOSSApps(context.Context, *ListKnownBOSSAppsRequest) (*ListKnownBOSSAppsResponse, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	RegisterTask(context.Context, *RegisterTaskRequest) (*RegisterTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	ListFilesWUP(context.Context, *ListFilesWUPRequest) (*ListFilesWUPResponse, error)
	UploadFileWUP(context.Context, *UploadFileWUPRequest) (*UploadFileWUPResponse, error)
	UpdateFileMetadataWUP(context.Context, *UpdateFileMetadataWUPRequest) (*UpdateFileMetadataWUPResponse, error)
	ListFilesCTR(context.Context, *ListFilesCTRRequest) (*ListFilesCTRResponse, error)
	UploadFileCTR(context.Context, *UploadFileCTRRequest) (*UploadFileCTRResponse, error)
	UpdateFileMetadataCTR(context.Context, *UpdateFileMetadataCTRRequest) (*UpdateFileMetadataCTRResponse, error)
	mustEmbedUnimplementedBossServiceServer()
}

// UnimplementedBossServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBossServiceServer struct{}

func (UnimplementedBossServiceServer) ListKnownBOSSApps(context.Context, *ListKnownBOSSAppsRequest) (*ListKnownBOSSAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnownBOSSApps not implemented")
}
func (UnimplementedBossServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedBossServiceServer) RegisterTask(context.Context, *RegisterTaskRequest) (*RegisterTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTask not implemented")
}
func (UnimplementedBossServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedBossServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedBossServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedBossServiceServer) ListFilesWUP(context.Context, *ListFilesWUPRequest) (*ListFilesWUPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesWUP not implemented")
}
func (UnimplementedBossServiceServer) UploadFileWUP(context.Context, *UploadFileWUPRequest) (*UploadFileWUPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileWUP not implemented")
}
func (UnimplementedBossServiceServer) UpdateFileMetadataWUP(context.Context, *UpdateFileMetadataWUPRequest) (*UpdateFileMetadataWUPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileMetadataWUP not implemented")
}
func (UnimplementedBossServiceServer) ListFilesCTR(context.Context, *ListFilesCTRRequest) (*ListFilesCTRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesCTR not implemented")
}
func (UnimplementedBossServiceServer) UploadFileCTR(context.Context, *UploadFileCTRRequest) (*UploadFileCTRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileCTR not implemented")
}
func (UnimplementedBossServiceServer) UpdateFileMetadataCTR(context.Context, *UpdateFileMetadataCTRRequest) (*UpdateFileMetadataCTRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileMetadataCTR not implemented")
}
func (UnimplementedBossServiceServer) mustEmbedUnimplementedBossServiceServer() {}
func (UnimplementedBossServiceServer) testEmbeddedByValue()                     {}

// UnsafeBossServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BossServiceServer will
// result in compilation errors.
type UnsafeBossServiceServer interface {
	mustEmbedUnimplementedBossServiceServer()
}

func RegisterBossServiceServer(s grpc.ServiceRegistrar, srv BossServiceServer) {
	// If the following call pancis, it indicates UnimplementedBossServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BossService_ServiceDesc, srv)
}

func _BossService_ListKnownBOSSApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnownBOSSAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).ListKnownBOSSApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_ListKnownBOSSApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).ListKnownBOSSApps(ctx, req.(*ListKnownBOSSAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_RegisterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).RegisterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_RegisterTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).RegisterTask(ctx, req.(*RegisterTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_ListFilesWUP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesWUPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).ListFilesWUP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_ListFilesWUP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).ListFilesWUP(ctx, req.(*ListFilesWUPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_UploadFileWUP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileWUPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).UploadFileWUP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_UploadFileWUP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).UploadFileWUP(ctx, req.(*UploadFileWUPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_UpdateFileMetadataWUP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileMetadataWUPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).UpdateFileMetadataWUP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_UpdateFileMetadataWUP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).UpdateFileMetadataWUP(ctx, req.(*UpdateFileMetadataWUPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_ListFilesCTR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesCTRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).ListFilesCTR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_ListFilesCTR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).ListFilesCTR(ctx, req.(*ListFilesCTRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_UploadFileCTR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileCTRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).UploadFileCTR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_UploadFileCTR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).UploadFileCTR(ctx, req.(*UploadFileCTRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BossService_UpdateFileMetadataCTR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileMetadataCTRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).UpdateFileMetadataCTR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BossService_UpdateFileMetadataCTR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).UpdateFileMetadataCTR(ctx, req.(*UpdateFileMetadataCTRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BossService_ServiceDesc is the grpc.ServiceDesc for BossService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BossService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boss.v2.BossService",
	HandlerType: (*BossServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKnownBOSSApps",
			Handler:    _BossService_ListKnownBOSSApps_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _BossService_ListTasks_Handler,
		},
		{
			MethodName: "RegisterTask",
			Handler:    _BossService_RegisterTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _BossService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _BossService_DeleteTask_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _BossService_DeleteFile_Handler,
		},
		{
			MethodName: "ListFilesWUP",
			Handler:    _BossService_ListFilesWUP_Handler,
		},
		{
			MethodName: "UploadFileWUP",
			Handler:    _BossService_UploadFileWUP_Handler,
		},
		{
			MethodName: "UpdateFileMetadataWUP",
			Handler:    _BossService_UpdateFileMetadataWUP_Handler,
		},
		{
			MethodName: "ListFilesCTR",
			Handler:    _BossService_ListFilesCTR_Handler,
		},
		{
			MethodName: "UploadFileCTR",
			Handler:    _BossService_UploadFileCTR_Handler,
		},
		{
			MethodName: "UpdateFileMetadataCTR",
			Handler:    _BossService_UpdateFileMetadataCTR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boss/v2/boss_service.proto",
}
